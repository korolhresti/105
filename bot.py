# bot.py ‚Äî Telegram AI News –ë–æ—Ç: –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è 500+ —Ñ—É–Ω–∫—Ü—ñ–π

import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv
import aiohttp
from datetime import datetime
import json

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ URL –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("WEBAPP_URL", "http://localhost:8000") # URL –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ FastAPI backend
MONOBANK_CARD_NUMBER = os.getenv("MONOBANK_CARD_NUMBER") # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank, —è–∫—â–æ —î

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# ==== STATES ====
# –°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞
class AddSourceStates(StatesGroup):
    waiting_for_source_name = State()
    waiting_for_source_link = State()
    waiting_for_source_type = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤/–∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—ñ–≤)
class AddNewsStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_lang = State()
    waiting_for_country = State()
    waiting_for_tags = State()
    waiting_for_source_name = State()
    waiting_for_link = State()
    waiting_for_media = State() # –î–ª—è —Ñ–æ—Ç–æ/file_id

# –°—Ç–∞–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω
class SearchNewsStates(StatesGroup):
    waiting_for_search_query = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Ä–≥–∏ –Ω–∞ –Ω–æ–≤–∏–Ω—É
class ReportNewsStates(StatesGroup):
    waiting_for_news_id_or_description = State()
    waiting_for_report_reason = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É
class TranslateTextStates(StatesGroup):
    waiting_for_text_to_translate = State()
    waiting_for_target_language = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
class FilterUpdateStates(StatesGroup):
    waiting_for_filter_type = State()
    waiting_for_filter_value = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–æ–±—ñ—Ä–∫–∞–º–∏ –Ω–æ–≤–∏–Ω
class CustomFeedStates(StatesGroup):
    waiting_for_feed_name = State()
    waiting_for_feed_filters_tags = State()
    waiting_for_feed_filters_sources = State()
    waiting_for_feed_filters_lang = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
class AddCommentStates(StatesGroup):
    waiting_for_comment_news_id = State()
    waiting_for_comment_text = State()
    waiting_for_parent_comment_id = State() # –î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ

# –°—Ç–∞–Ω–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–æ—é
class PremiumStates(StatesGroup):
    waiting_for_premium_confirm = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è email-—Ä–æ–∑—Å–∏–ª–∫–∏
class EmailSubscriptionStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_frequency = State()


# == –û–°–ù–û–í–ù–Ü –ö–õ–ê–í–Ü–ê–¢–£–†–ò ==

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(
    KeyboardButton("üì∞ –ù–æ–≤–∏–Ω–∏"),
    KeyboardButton("üéØ –§—ñ–ª—å—Ç—Ä–∏"),
    KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
    KeyboardButton("üì¨ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏–Ω"),
    KeyboardButton("üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    KeyboardButton("‚ùó –°–∫–∞—Ä–≥–∞"),
    KeyboardButton("üí¨ –í—ñ–¥–≥—É–∫"),
    KeyboardButton("üåê –ú–æ–≤–∞ / –ü–µ—Ä–µ–∫–ª–∞–¥"),
    KeyboardButton("üß† AI-–∞–Ω–∞–ª—ñ–∑"),
    KeyboardButton("üìö –ó–∞–∫–ª–∞–¥–∫–∏"),
    KeyboardButton("üî• –¢—Ä–µ–Ω–¥–∏"),
    KeyboardButton("üîç –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω")
)

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –Ω–æ–≤–∏–Ω–∞—Ö (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ /myfeed)
news_navigation_keyboard = InlineKeyboardMarkup(row_width=2)
news_navigation_keyboard.add(
    InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data="news_prev"),
    InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data="news_next"),
    InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="news_save"),
    InlineKeyboardButton("üí¨ –ö–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏", callback_data="news_comment"),
    InlineKeyboardButton("üìù –ö–æ—Ä–æ—Ç–∫–æ", callback_data="news_summary"),
    InlineKeyboardButton("üëç –û—Ü—ñ–Ω–∏—Ç–∏", callback_data="news_rate_start"), # –î–æ–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ü—ñ–Ω–∫–∏
    InlineKeyboardButton("‚ùì –ß–æ–º—É —è —Ü–µ –±–∞—á—É?", callback_data="why_this_news")
)

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ–π –Ω–∞ –Ω–æ–≤–∏–Ω–∏ (–µ–º–æ–¥–∑—ñ)
news_reactions_keyboard = InlineKeyboardMarkup(row_width=5)
news_reactions_keyboard.add(
    InlineKeyboardButton("‚ù§Ô∏è", callback_data="react_‚ù§Ô∏è"),
    InlineKeyboardButton("üòÆ", callback_data="react_üòÆ"),
    InlineKeyboardButton("ü§î", callback_data="react_ü§î"),
    InlineKeyboardButton("üò¢", callback_data="react_üò¢"),
    InlineKeyboardButton("üò°", callback_data="react_üò°")
)

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ñ—ñ–ª—å—Ç—Ä–∞
filter_type_keyboard = InlineKeyboardMarkup(row_width=2)
filter_type_keyboard.add(
    InlineKeyboardButton("–¢–µ–º–∞", callback_data="filter_type_tag"),
    InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback_data="filter_type_category"),
    InlineKeyboardButton("–î–∂–µ—Ä–µ–ª–æ", callback_data="filter_type_source"),
    InlineKeyboardButton("–ú–æ–≤–∞", callback_data="filter_type_language"),
    InlineKeyboardButton("–ö—Ä–∞—ó–Ω–∞", callback_data="filter_type_country"),
    InlineKeyboardButton("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="filter_type_content_type")
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
settings_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
settings_keyboard.add(
    KeyboardButton("‚öôÔ∏è –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏"),
    KeyboardButton("üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏"),
    KeyboardButton("üñêÔ∏è –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É"),
    KeyboardButton("üîí –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º"),
    KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ"),
    KeyboardButton("üßæ –ú–æ—ó –¥–∂–µ—Ä–µ–ª–∞"),
    KeyboardButton("‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É"),
    KeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É"),
    KeyboardButton("üí∞ –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞"),
    KeyboardButton("üíå Email-—Ä–æ–∑—Å–∏–ª–∫–∞"),
    KeyboardButton("üîî –ê–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"),
    KeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
)

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–æ–≤–∏–Ω
view_mode_keyboard = InlineKeyboardMarkup(row_width=2)
view_mode_keyboard.add(
    InlineKeyboardButton("üñê –†—É—á–Ω–∏–π (/myfeed)", callback_data="set_view_manual"),
    InlineKeyboardButton("üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="set_view_auto")
)

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç—É
digest_frequency_keyboard = InlineKeyboardMarkup(row_width=2)
digest_frequency_keyboard.add(
    InlineKeyboardButton("–©–æ–¥–Ω—è", callback_data="digest_freq_daily"),
    InlineKeyboardButton("–©–æ–≥–æ–¥–∏–Ω–∏", callback_data="digest_freq_hourly"),
    InlineKeyboardButton("–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", callback_data="digest_unsubscribe")
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é AI-–∞–Ω–∞–ª—ñ–∑—É
ai_analysis_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
ai_analysis_keyboard.add(
    KeyboardButton("üìù –†–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏"),
    KeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"),
    KeyboardButton("‚úÖ –§–∞–∫—Ç—á–µ–∫—ñ–Ω–≥"),
    KeyboardButton("‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫"),
    KeyboardButton("üé≠ –ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω—É"),
    KeyboardButton("ü§î –ü–æ—è—Å–Ω–∏ –º–µ–Ω—ñ –Ω–æ–≤–∏–Ω—É"),
    KeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
)

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –Ω–æ–≤–∏–Ω–∏ (–∑—ñ—Ä–æ—á–∫–∏)
rating_keyboard = InlineKeyboardMarkup(row_width=5)
for i in range(1, 6):
    rating_keyboard.insert(InlineKeyboardButton(str(i), callback_data=f"rate_{i}"))

# ==== –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ====

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –†–µ—î—Å—Ç—Ä—É—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.
    """
    await msg.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ AI News –ë–æ—Ç–∞!", reply_markup=main_keyboard)
    async with aiohttp.ClientSession() as session:
        user_data = {
            "user_id": msg.from_user.id,
            "language": msg.from_user.language_code,
            "country": "UA" # –ö—Ä–∞—ó–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, –º–æ–∂–µ –±—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        }
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await session.post(f"{API_URL}/users/register", json=user_data)
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º—ñ—É–º
        resp = await session.get(f"{API_URL}/users/{msg.from_user.id}/profile")
        if resp.status == 200:
            profile = await resp.json()
            if profile.get('is_premium'):
                await msg.answer("üéâ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ü—Ä–µ–º—ñ—É–º –¥–æ—Å—Ç—É–ø!")
        await msg.answer("–Ø–∫—â–æ –≤–∏ —Ç—É—Ç –≤–ø–µ—Ä—à–µ, —Ä–∞–¥–∏–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω —É —Ä–æ–∑–¥—ñ–ª—ñ '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'.")

@dp.message_handler(lambda m: m.text == "üì∞ –ù–æ–≤–∏–Ω–∏")
async def show_news_overview(msg: types.Message):
    """
    –ù–∞–¥–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –Ω–æ–≤–∏–Ω —Ç–∞ –ø—ñ–¥–∫–∞–∑—É—î, —è–∫ —ó—Ö –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏.
    """
    await msg.answer("üóûÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏...\n(–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /myfeed –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ –æ–¥–Ω—ñ–π, –∞–±–æ /digest –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç—É.)")

@dp.message_handler(lambda m: m.text == "üéØ –§—ñ–ª—å—Ç—Ä–∏")
async def filters_menu(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    """
    await msg.answer("üéØ –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É, —Ç–µ–º—É, –º–æ–≤—É, –¥–∂–µ—Ä–µ–ª–æ –∞–±–æ –∑–∞–±–ª–æ–∫—É–π—Ç–µ —Ç–µ, —â–æ –Ω–µ —Ü—ñ–∫–∞–≤–∏—Ç—å", reply_markup=filter_type_keyboard)

@dp.message_handler(lambda m: m.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def settings(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    """
    await msg.answer("‚öôÔ∏è –¢—É—Ç –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É, –∫—Ä–∞—ó–Ω—É, –¥–æ–±—ñ—Ä–∫–∏, –¥–∂–µ—Ä–µ–ª–∞ —Ç–∞ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.", reply_markup=settings_keyboard)

@dp.message_handler(lambda m: m.text == "üì¨ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏–Ω")
async def manage_digest_subscription(msg: types.Message):
    """
    –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–æ–≤–∏–Ω.
    """
    await msg.answer("üì¨ –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∞–º–∏: –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É –∞–±–æ –≤—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è.", reply_markup=digest_frequency_keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("digest_freq_"))
async def set_digest_frequency(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç—É –∞–±–æ –≤—ñ–¥–ø–∏—Å–∫–∏.
    """
    await bot.answer_callback_query(callback_query.id)
    frequency = callback_query.data.replace("digest_freq_", "")
    user_id = callback_query.from_user.id

    if frequency == "unsubscribe":
        async with aiohttp.ClientSession() as session:
            resp = await session.post(f"{API_URL}/subscriptions/unsubscribe", params={"user_id": user_id})
            if resp.status == 200:
                await callback_query.message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–æ–∫.")
            else:
                await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    else:
        async with aiohttp.ClientSession() as session:
            resp = await session.post(f"{API_URL}/subscriptions/update", json={"user_id": user_id, "frequency": frequency})
            if resp.status == 200:
                await callback_query.message.answer(f"‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ {frequency} —Ä–æ–∑—Å–∏–ª–∫—É.")
            else:
                await callback_query.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await callback_query.message.delete_reply_markup() # –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É

@dp.message_handler(lambda m: m.text == "üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def analytics(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –π–æ–≥–æ —Ä–∞–Ω–≥/–±–µ–π–¥–∂—ñ.
    """
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/analytics/{msg.from_user.id}") as resp:
            if resp.status == 200:
                data = await resp.json()
                badges_text = ", ".join(data.get('badges', [])) if data.get('badges') else "–ù–µ–º–∞—î"
                await msg.answer(f"üìä –í–∞—à–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –†–∞–Ω–≥:\n"
                                 f"–†—ñ–≤–µ–Ω—å: {data.get('level', 0)}\n"
                                 f"–ë–µ–π–¥–∂—ñ: {badges_text}\n"
                                 f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –Ω–æ–≤–∏–Ω: {data.get('viewed', 0)}\n"
                                 f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–∏–Ω: {data.get('saved', 0)}\n"
                                 f"–ü–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {data.get('read_full_count', 0)}\n"
                                 f"–í–ø–æ–¥–æ–±–∞–Ω–æ: {data.get('liked_count', 0)}\n"
                                 f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {data.get('skipped_count', 0)}\n"
                                 f"–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {data.get('comments_count', 0)}\n"
                                 f"–î–æ–¥–∞–Ω–æ –¥–∂–µ—Ä–µ–ª: {data.get('sources_added_count', 0)}\n"
                                 f"–û—Å—Ç–∞–Ω–Ω—å–æ –∞–∫—Ç–∏–≤–Ω–∏–π: {data.get('last_active', 'N/A')}")
            else:
                await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É.")

@dp.message_handler(lambda m: m.text == "‚ùó –°–∫–∞—Ä–≥–∞")
async def report_news_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Ä–≥–∏ –Ω–∞ –Ω–æ–≤–∏–Ω—É.
    """
    await msg.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è, –∞–±–æ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É.")
    await ReportNewsStates.waiting_for_news_id_or_description.set()

@dp.message_handler(state=ReportNewsStates.waiting_for_news_id_or_description)
async def process_report_news_id_or_description(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è ID –Ω–æ–≤–∏–Ω–∏ –∞–±–æ –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏ –¥–ª—è —Å–∫–∞—Ä–≥–∏.
    """
    try:
        news_id = int(msg.text)
        await state.update_data(news_id=news_id, is_id=True)
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '—Ñ–µ–π–∫', '–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ', '–æ–±—Ä–∞–∑–ª–∏–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç').")
        await ReportNewsStates.waiting_for_report_reason.set()
    except ValueError:
        await state.update_data(news_description=msg.text, is_id=False)
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '—Ñ–µ–π–∫', '–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ', '–æ–±—Ä–∞–∑–ª–∏–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç').")
        await ReportNewsStates.waiting_for_report_reason.set()

@dp.message_handler(state=ReportNewsStates.waiting_for_report_reason)
async def process_report_reason(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ —Å–∫–∞—Ä–≥–∏ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —ó—ó –Ω–∞ backend.
    """
    user_data = await state.get_data()
    reason = msg.text
    news_id = user_data.get('news_id')
    # news_description = user_data.get('news_description') # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è API –Ω–∞–ø—Ä—è–º—É, –∞–ª–µ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è/–∫–æ–Ω—Ç–µ–∫—Å—Ç—É

    payload = {
        "user_id": msg.from_user.id,
        "reason": reason
    }
    if news_id:
        payload["news_id"] = news_id

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/report", json=payload)
        if resp.status == 200:
            await msg.answer("‚úÖ –í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É!")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫–∞—Ä–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()

@dp.message_handler(lambda m: m.text == "üí¨ –í—ñ–¥–≥—É–∫")
async def send_feedback_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É.
    """
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫, —ñ –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Ä–∞—Ö—É—î–º–æ –π–æ–≥–æ")
    await FSMContext.current().set_state("waiting_for_feedback_text")

@dp.message_handler(state="waiting_for_feedback_text")
async def process_feedback_text(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –Ω–∞ backend.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/feedback", json={"user_id": msg.from_user.id, "message": msg.text})
        if resp.status == 200:
            await msg.answer("‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—î–º–æ!")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()

@dp.message_handler(lambda m: m.text == "üåê –ú–æ–≤–∞ / –ü–µ—Ä–µ–∫–ª–∞–¥")
async def language_translate(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–≤—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥.
    """
    await msg.answer("üåç –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–æ–≤–∏–Ω.\n"
                     "–í–∏ –º–æ–∂–µ—Ç–µ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /translate")

@dp.message_handler(commands=["translate"])
async def translate_command_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É.
    """
    await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏.")
    await TranslateTextStates.waiting_for_text_to_translate.set()

@dp.message_handler(state=TranslateTextStates.waiting_for_text_to_translate)
async def process_text_to_translate(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É.
    """
    await state.update_data(text_to_translate=msg.text)
    await msg.answer("–ù–∞ —è–∫—É –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, en, uk, fr)")
    await TranslateTextStates.waiting_for_target_language.set()

@dp.message_handler(state=TranslateTextStates.waiting_for_target_language)
async def process_target_language(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–æ backend.
    """
    data = await state.get_data()
    text_to_translate = data.get('text_to_translate')
    target_language = msg.text.lower()

    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.post(f"{API_URL}/translate", json={
                "text": text_to_translate,
                "target_language": target_language
            })
            if resp.status == 200:
                result = await resp.json()
                await msg.answer(f"–ü–µ—Ä–µ–∫–ª–∞–¥: {result['translated_text']}")
            else:
                await msg.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception as e:
            await msg.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    await state.finish()


@dp.message_handler(lambda m: m.text == "üß† AI-–∞–Ω–∞–ª—ñ–∑")
async def ai_features(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é —Ñ—É–Ω–∫—Ü—ñ–π AI-–∞–Ω–∞–ª—ñ–∑—É.
    """
    await msg.answer("ü§ñ –û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é AI-–∞–Ω–∞–ª—ñ–∑—É:", reply_markup=ai_analysis_keyboard)

@dp.message_handler(lambda m: m.text == "üìù –†–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏")
@dp.message_handler(commands=["summary"])
async def summary(msg: types.Message):
    """
    –ì–µ–Ω–µ—Ä—É—î —Ä–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏ –∑–∞ ID –∞–±–æ –Ω–∞–¥–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    args = msg.get_args()
    news_id = None
    text_to_summarize = None

    if args and args.isdigit():
        news_id = int(args)
    elif args:
        text_to_summarize = args

    if not news_id and not text_to_summarize:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏: /summary 123 –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º–µ.")
        return

    async with aiohttp.ClientSession() as session:
        payload = {}
        if news_id:
            payload['news_id'] = news_id
        elif text_to_summarize:
            payload['text'] = text_to_summarize

        resp = await session.post(f"{API_URL}/summary", json=payload)
        if resp.status == 200:
            result = await resp.json()
            await msg.answer(f"üß† –†–µ–∑—é–º–µ: {result['summary']}")
        else:
            await msg.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–∑—é–º–µ. –ú–æ–∂–ª–∏–≤–æ, –Ω–æ–≤–∏–Ω–∏ –∑ —Ç–∞–∫–∏–º ID –Ω–µ —ñ—Å–Ω—É—î.")

@dp.message_handler(lambda m: m.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
@dp.message_handler(commands=["recommend"])
async def recommend(msg: types.Message):
    """
    –û—Ç—Ä–∏–º—É—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/recommend/{msg.from_user.id}")
        if resp.status == 200:
            data = await resp.json()
            if data['recommended']:
                response_text = "üìå –í–∞–º –º–æ–∂—É—Ç—å —Å–ø–æ–¥–æ–±–∞—Ç–∏—Å—å —Ü—ñ –Ω–æ–≤–∏–Ω–∏:\n"
                for news_item in data['recommended']:
                    response_text += f"- ID: {news_item['id']}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item['title']} (–û—Ü—ñ–Ω–∫–∞: {news_item['score']})\n"
                await msg.answer(response_text)
            else:
                await msg.answer("ü§∑‚Äç‚ôÄÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –≤–∞—Å.")
        else:
            await msg.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.")

@dp.message_handler(lambda m: m.text == "‚úÖ –§–∞–∫—Ç—á–µ–∫—ñ–Ω–≥")
@dp.message_handler(commands=["verify"])
async def verify_news_command(msg: types.Message):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤–∏–Ω—É –Ω–∞ –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (—Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥).
    """
    args = msg.get_args()
    if not args or not args.isdigit():
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: /verify 123")
        return
    news_id = int(args)
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/verify/{news_id}")
        if resp.status == 200:
            result = await resp.json()
            status_text = "‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Ñ–µ–π–∫–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞!" if result['is_fake'] else "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ. –ô–º–æ–≤—ñ—Ä–Ω–æ, –ø—Ä–∞–≤–¥–∏–≤–∞ –Ω–æ–≤–∏–Ω–∞."
            await msg.answer(f"{status_text}\n–ù–æ–≤–∏–Ω–∞ #{news_id}. –î–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {result['confidence']*100:.0f}% (–î–∂–µ—Ä–µ–ª–æ: {result['source']})")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
@dp.message_handler(commands=["rewrite_headline"])
async def rewrite_headline_command(msg: types.Message):
    """
    –ü–µ—Ä–µ–ø–∏—Å—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI.
    """
    args = msg.get_args()
    if not args:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç, –∑–∞–≥–æ–ª–æ–≤–æ–∫ —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏: /rewrite_headline [–≤–∞—à —Ç–µ–∫—Å—Ç]")
        return
    text = args

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/ai/rewrite_headline", json={"text": text})
        if resp.status == 200:
            result = await resp.json()
            await msg.answer(f"–û—Ä–∏–≥—ñ–Ω–∞–ª: \"{text}\"\n–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: \"{result['rewritten_headline']}\"")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message_handler(lambda m: m.text == "üé≠ –ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω—É")
@dp.message_handler(commands=["analyze_tone"])
async def analyze_tone_command(msg: types.Message):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î —Ç–æ–Ω –Ω–∞–¥–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI.
    """
    args = msg.get_args()
    if not args:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–æ–Ω—É: /analyze_tone [–≤–∞—à —Ç–µ–∫—Å—Ç]")
        return
    text = args

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/ai/analyze_sentiment", json={"news_id": 0, "text": text})
        if resp.status == 200:
            result = await resp.json()
            await msg.answer(f"–ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω—É:\n–¢–æ–Ω: {result['tone']}\n–û—Ü—ñ–Ω–∫–∞: {result['sentiment_score']:.2f}")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–æ–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message_handler(lambda m: m.text == "ü§î –ü–æ—è—Å–Ω–∏ –º–µ–Ω—ñ –Ω–æ–≤–∏–Ω—É")
@dp.message_handler(commands=["explain_news"])
async def explain_news_command(msg: types.Message):
    """
    –ü–æ—è—Å–Ω—é—î –Ω–æ–≤–∏–Ω—É –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (AI Assistant).
    """
    args = msg.get_args()
    if not args:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—è—Å–Ω–∏—Ç–∏: /explain_news 123")
        return
    news_id = args
    # –¶–µ –± —ñ–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞–ª–æ –≤–º—ñ—Å—Ç –Ω–æ–≤–∏–Ω–∏, –∞ –ø–æ—Ç—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–æ –π–æ–≥–æ –¥–æ LLM –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è
    await msg.answer(f"–û—Å—å —Å–ø—Ä–æ—â–µ–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ ID {news_id}: (–º–æ–∫–æ–≤–∞–Ω–æ) –¶—è –Ω–æ–≤–∏–Ω–∞ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ [–æ—Å–Ω–æ–≤–Ω–∞ –ø–æ–¥—ñ—è] –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.")

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")
@dp.message_handler(commands=["addsource"])
async def add_source_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω.
    """
    await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –¥–∂–µ—Ä–µ–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ü—Ä–∞–≤–¥–∞').")
    await AddSourceStates.waiting_for_source_name.set()

@dp.message_handler(state=AddSourceStates.waiting_for_source_name)
async def process_source_name(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–∑–≤—É –¥–∂–µ—Ä–µ–ª–∞.
    """
    await state.update_data(name=msg.text)
    await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ (URL –∞–±–æ ID Telegram-–∫–∞–Ω–∞–ª—É).")
    await AddSourceStates.waiting_for_source_link.set()

@dp.message_handler(state=AddSourceStates.waiting_for_source_link)
async def process_source_link(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ.
    """
    await state.update_data(link=msg.text)
    await msg.answer("–í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø –¥–∂–µ—Ä–µ–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Telegram', 'RSS', 'Twitter', 'Website').")
    await AddSourceStates.waiting_for_source_type.set()

@dp.message_handler(state=AddSourceStates.waiting_for_source_type)
async def process_source_type(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–∏–ø –¥–∂–µ—Ä–µ–ª–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –¥–∞–Ω—ñ –Ω–∞ backend –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.
    """
    user_data = await state.get_data()
    source_name = user_data['name']
    source_link = user_data['link']
    source_type = msg.text

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/sources/add", json={
            "user_id": msg.from_user.id,
            "name": source_name,
            "link": source_link,
            "type": source_type
        })
        if resp.status == 200:
            await msg.answer(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ '{source_name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
        elif resp.status == 400:
            await msg.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {await resp.json().get('detail', '–î–∂–µ—Ä–µ–ª–æ –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –¥–∞–Ω—ñ –Ω–µ–≤—ñ—Ä–Ω—ñ.')}")
        else:
            await msg.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()

@dp.message_handler(lambda m: m.text == "üßæ –ú–æ—ó –¥–∂–µ—Ä–µ–ª–∞")
@dp.message_handler(commands=["sources"])
async def list_sources(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/sources")
        if resp.status == 200:
            sources = await resp.json()
            if sources:
                response_text = "üìú –î–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞:\n"
                for s in sources:
                    verified_status = "‚úÖ" if s['verified'] else "‚ö†Ô∏è"
                    reliability = f" (–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å: {s['reliability_score']})" if s['reliability_score'] else ""
                    response_text += f"- {s['name']} ({s['type']}) {verified_status}{reliability} [ID: {s['id']}]\n"
                await msg.answer(response_text)
            else:
                await msg.answer("ü§∑‚Äç‚ôÄÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª.")

@dp.message_handler(commands=["myfeed"])
async def my_feed_start(msg: types.Message, state: FSMContext):
    """
    –†–æ–∑–ø–æ—á–∏–Ω–∞—î —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç—Ä—ñ—á–∫–∏ –Ω–æ–≤–∏–Ω –ø–æ –æ–¥–Ω—ñ–π.
    """
    await state.update_data(current_news_offset=0)
    await send_news_item(msg, state)

async def send_news_item(msg: types.Message, state: FSMContext):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–¥–Ω—É –Ω–æ–≤–∏–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    user_data = await state.get_data()
    offset = user_data.get("current_news_offset", 0)

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/news/{msg.from_user.id}", params={"limit": 1, "offset": offset})
        if resp.status == 200:
            news_items = await resp.json()
            if news_items:
                news_item = news_items[0]
                text = f"*{news_item['title']}*\n\n{news_item['content']}\n\n" \
                       f"[–î–∂–µ—Ä–µ–ª–æ: {news_item['source']}]({news_item['link']})\n\n" \
                       f"_{news_item.get('tone', '')} | ID: {news_item['id']}_" # –î–æ–¥–∞—î–º–æ —Ç–æ–Ω

                markup = news_navigation_keyboard
                if news_item.get('is_fake'):
                    text += "\n\nüõë *–¶—è –Ω–æ–≤–∏–Ω–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Ñ–µ–π–∫–æ–≤–∞.*"
                
                await bot.send_message(msg.chat.id, text, parse_mode="Markdown", reply_markup=markup)
                await bot.send_message(msg.chat.id, "–Ø–∫ –≤–∞–º —Ü—è –Ω–æ–≤–∏–Ω–∞?", reply_markup=news_reactions_keyboard)

                await state.update_data(last_sent_news_id=news_item['id'])
                # –õ–æ–≥—É—î–º–æ –≤–∑–∞—î–º–æ–¥—ñ—é "view"
                await session.post(f"{API_URL}/log_user_activity", json={"user_id": msg.from_user.id, "news_id": news_item['id'], "action": "view"})

            else:
                await msg.answer("‚ÑπÔ∏è –ù–æ–≤–∏–Ω–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏.", reply_markup=main_keyboard)
                await state.finish()
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_keyboard)
            await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("news_"))
async def process_news_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ –Ω–æ–≤–∏–Ω–∞—Ö (–Ω–∞—Å—Ç—É–ø–Ω–∞, –ø–æ–ø–µ—Ä–µ–¥–Ω—è, –∑–±–µ—Ä–µ–≥—Ç–∏, –∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏, —Ä–µ–∑—é–º–µ).
    """
    await bot.answer_callback_query(callback_query.id)
    user_data = await state.get_data()
    current_offset = user_data.get("current_news_offset", 0)
    last_sent_news_id = user_data.get("last_sent_news_id")

    if callback_query.data == "news_next":
        await state.update_data(current_news_offset=current_offset + 1)
        await send_news_item(callback_query.message, state)
        async with aiohttp.ClientSession() as session:
            await session.post(f"{API_URL}/log_user_activity", json={"user_id": callback_query.from_user.id, "news_id": last_sent_news_id, "action": "skip"})
    elif callback_query.data == "news_prev":
        if current_offset > 0:
            await state.update_data(current_news_offset=current_offset - 1)
            await send_news_item(callback_query.message, state)
        else:
            await callback_query.message.answer("–í–∏ –Ω–∞ –ø–µ—Ä—à—ñ–π –Ω–æ–≤–∏–Ω—ñ.")
    elif callback_query.data == "news_save":
        if last_sent_news_id:
            async with aiohttp.ClientSession() as session:
                resp = await session.post(f"{API_URL}/bookmarks/add", json={"user_id": callback_query.from_user.id, "news_id": last_sent_news_id})
                if resp.status == 200:
                    await callback_query.message.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É –∑–∞–∫–ª–∞–¥–∫–∏!")
                else:
                    await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–Ω—É.")
            await session.post(f"{API_URL}/log_user_activity", json={"user_id": callback_query.from_user.id, "news_id": last_sent_news_id, "action": "save"})
        else:
            await callback_query.message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
    elif callback_query.data == "news_comment":
        if last_sent_news_id:
            await state.update_data(commenting_news_id=last_sent_news_id)
            await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä:")
            await AddCommentStates.waiting_for_comment_text.set()
        else:
            await callback_query.message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è.")
    elif callback_query.data == "news_summary":
        if last_sent_news_id:
            async with aiohttp.ClientSession() as session:
                resp = await session.post(f"{API_URL}/summary", json={"news_id": last_sent_news_id})
                if resp.status == 200:
                    result = await resp.json()
                    await callback_query.message.answer(f"üìù –ö–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç –Ω–æ–≤–∏–Ω–∏:\n{result['summary']}")
                else:
                    await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏.")
        else:
            await callback_query.message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ä–µ–∑—é–º–µ.")
    elif callback_query.data == "news_rate_start":
        if last_sent_news_id:
            await state.update_data(rating_news_id=last_sent_news_id)
            await callback_query.message.answer("–û—Ü—ñ–Ω—ñ—Ç—å –Ω–æ–≤–∏–Ω—É –≤—ñ–¥ 1 –¥–æ 5 –∑—ñ—Ä–æ–∫:", reply_markup=rating_keyboard)
        else:
            await callback_query.message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.")


@dp.callback_query_handler(lambda c: c.data == "why_this_news")
async def why_this_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ—è—Å–Ω—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ, —á–æ–º—É –π–æ–º—É –±—É–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ —Ü—è –Ω–æ–≤–∏–Ω–∞, –≤–∏—Ö–æ–¥—è—á–∏ –∑ –π–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    """
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        profile = await profile_resp.json()
        current_feed_id = profile.get('current_feed_id')
        
        filter_text = "–¶—é –Ω–æ–≤–∏–Ω—É –ø–æ–∫–∞–∑–∞–Ω–æ, —Ç–æ–º—É —â–æ:\n"
        
        if current_feed_id:
            feed_resp = await session.get(f"{API_URL}/custom_feeds/{user_id}")
            feeds = await feed_resp.json()
            active_feed = next((f for f in feeds if f['id'] == current_feed_id), None)
            if active_feed:
                filter_text += f"- –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –¥–æ–±—ñ—Ä–∫—É: *{active_feed['feed_name']}*\n"
                if active_feed['filters']:
                    for k, v in active_feed['filters'].items():
                        filter_text += f"  - –ó–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–º: {k.capitalize()}: {v}\n"
            else:
                filter_text += "- –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ–±—ñ—Ä–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ù–æ–≤–∏–Ω–∏ –æ–±–∏—Ä–∞—é—Ç—å—Å—è –∑–∞ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.\n"
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏, —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –¥–æ–±—ñ—Ä–∫–∏ –∞–±–æ —è–∫—â–æ –¥–æ–±—ñ—Ä–∫–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–µ–≤–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        filters_resp = await session.get(f"{API_URL}/filters/{user_id}")
        filters = await filters_resp.json()
        if filters and not current_feed_id: # –ü–æ–∫–∞–∑—É—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î –∫–∞—Å—Ç–æ–º–Ω–æ—ó –¥–æ–±—ñ—Ä–∫–∏
            for key, value in filters.items():
                if value:
                    filter_text += f"- {key.capitalize()}: {value}\n"
        
        if not filters and not current_feed_id: # –Ø–∫—â–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            filter_text += "- –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –ù–æ–≤–∏–Ω–∏ –æ–±–∏—Ä–∞—é—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–æ."
            
        await callback_query.message.answer(filter_text, parse_mode="Markdown")

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ (FSM) ===
@dp.message_handler(state=AddCommentStates.waiting_for_comment_text)
async def process_comment_text(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –Ω–∞ backend.
    """
    user_data = await state.get_data()
    news_id = user_data.get('commenting_news_id')
    comment_content = msg.text

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/comments/add", json={
            "user_id": msg.from_user.id,
            "news_id": news_id,
            "content": comment_content
        })
        if resp.status == 200:
            await msg.answer("‚úÖ –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ!")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä.")
    await state.finish()

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ===
@dp.callback_query_handler(lambda c: c.data.startswith("filter_type_"))
async def process_filter_type_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É —Ñ—ñ–ª—å—Ç—Ä–∞ —Ç–∞ –∑–∞–ø–∏—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è.
    """
    await bot.answer_callback_query(callback_query.id)
    filter_type = callback_query.data.replace("filter_type_", "")
    await state.update_data(filter_type=filter_type)
    await callback_query.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ '{filter_type}'.")
    await FilterUpdateStates.waiting_for_filter_value.set()

@dp.message_handler(state=FilterUpdateStates.waiting_for_filter_value)
async def process_filter_value(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –Ω–∞ backend –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    """
    user_data = await state.get_data()
    filter_type = user_data['filter_type']
    filter_value = msg.text

    payload = {"user_id": msg.from_user.id}
    payload[filter_type] = filter_value

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/filters/update", json=payload)
        if resp.status == 200:
            await msg.answer(f"‚úÖ –§—ñ–ª—å—Ç—Ä '{filter_type}' –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{filter_value}'.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()

@dp.message_handler(lambda m: m.text == "üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏")
@dp.message_handler(commands=["resetfilters"])
async def reset_filters(msg: types.Message):
    """
    –°–∫–∏–¥–∞—î –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.delete(f"{API_URL}/filters/reset/{msg.from_user.id}")
        if resp.status == 200:
            await msg.answer("‚úÖ –í–∞—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –±—É–ª–∏ —Å–∫–∏–Ω—É—Ç—ñ.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message_handler(commands=["digest"])
async def send_digest(msg: types.Message):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–∏–Ω.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/digest/{msg.from_user.id}", params={"hours": 5})
        if resp.status == 200:
            news_items = await resp.json()
            if news_items:
                digest_text = "üìö –í–∞—à –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –≥–æ–¥–∏–Ω:\n\n"
                for item in news_items:
                    digest_text += f"‚ñ™Ô∏è *{item['title']}*\n"
                    digest_text += f"[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({item['link']})\n\n"
                await msg.answer(digest_text, parse_mode="Markdown")
            else:
                await msg.answer("ü§∑‚Äç‚ôÄÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–æ–≤–∏–Ω –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç—É –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç.")

@dp.message_handler(commands=["addnews"])
async def add_news_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤/–∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—ñ–≤).
    """
    # –¶—è –∫–æ–º–∞–Ω–¥–∞, –π–º–æ–≤—ñ—Ä–Ω–æ, –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É
    await msg.answer("üìù –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏:")
    await AddNewsStates.waiting_for_title.set()

@dp.message_handler(state=AddNewsStates.waiting_for_title)
async def process_add_news_title(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(title=msg.text)
    await msg.answer("üì∞ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏:")
    await AddNewsStates.waiting_for_content.set()

@dp.message_handler(state=AddNewsStates.waiting_for_content)
async def process_add_news_content(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(content=msg.text)
    await msg.answer("üåê –í–≤–µ–¥—ñ—Ç—å –º–æ–≤—É –Ω–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, uk, en):")
    await AddNewsStates.waiting_for_lang.set()

@dp.message_handler(state=AddNewsStates.waiting_for_lang)
async def process_add_news_lang(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –º–æ–≤—É –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(lang=msg.text)
    await msg.answer("üó∫Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –Ω–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, UA, US):")
    await AddNewsStates.waiting_for_country.set()

@dp.message_handler(state=AddNewsStates.waiting_for_country)
async def process_add_news_country(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –∫—Ä–∞—ó–Ω—É –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(country=msg.text)
    await msg.answer("üè∑Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–ª—ñ—Ç–∏–∫–∞, –µ–∫–æ–Ω–æ–º—ñ–∫–∞):")
    await AddNewsStates.waiting_for_tags.set()

@dp.message_handler(state=AddNewsStates.waiting_for_tags)
async def process_add_news_tags(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–≥–∏ –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(tags=[tag.strip() for tag in msg.text.split(',')])
    await msg.answer("üìö –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω–∏:")
    await AddNewsStates.waiting_for_source_name.set()

@dp.message_handler(state=AddNewsStates.waiting_for_source_name)
async def process_add_news_source(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–∑–≤—É –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(source=msg.text)
    await msg.answer("üîó (–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª –Ω–æ–≤–∏–Ω–∏:")
    await AddNewsStates.waiting_for_link.set()

@dp.message_handler(state=AddNewsStates.waiting_for_link)
async def process_add_news_link(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª –Ω–æ–≤–∏–Ω–∏.
    """
    await state.update_data(link=msg.text if msg.text.lower() != "/skip" else None)
    await msg.answer("üìé (–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç, –∞–±–æ /skip:")
    await AddNewsStates.waiting_for_media.set()

@dp.message_handler(content_types=types.ContentType.PHOTO | types.ContentType.DOCUMENT | types.ContentType.TEXT, state=AddNewsStates.waiting_for_media)
async def process_add_news_media(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –º–µ–¥—ñ–∞ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏.
    """
    file_id = None
    media_type = None

    if msg.photo:
        file_id = msg.photo[-1].file_id
        media_type = "photo"
    elif msg.document:
        file_id = msg.document.file_id
        media_type = "document"
    elif msg.text.lower() == "/skip":
        pass
    else:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ /skip.")
        return

    await state.update_data(file_id=file_id, media_type=media_type)
    user_data = await state.get_data()

    payload = {
        "title": user_data['title'],
        "content": user_data['content'],
        "lang": user_data['lang'],
        "country": user_data['country'],
        "tags": user_data['tags'],
        "source": user_data['source'],
        "link": user_data.get('link'),
        "file_id": user_data.get('file_id'),
        "media_type": user_data.get('media_type'),
        "source_type": "manual"
    }

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/news/add", json=payload)
        if resp.status == 200:
            await msg.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()

@dp.message_handler(lambda m: m.text == "üìö –ó–∞–∫–ª–∞–¥–∫–∏")
@dp.message_handler(commands=["bookmarks"])
async def show_bookmarks(msg: types.Message, state: FSMContext):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω (–∑–∞–∫–ª–∞–¥–æ–∫).
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/bookmarks/{msg.from_user.id}")
        if resp.status == 200:
            bookmarks = await resp.json()
            if bookmarks:
                response_text = "üìñ –í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n\n"
                for item in bookmarks:
                    response_text += f"‚ñ™Ô∏è *{item['title']}*\n"
                    response_text += f"[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({item['link']})\n\n"
                await msg.answer(response_text, parse_mode="Markdown")
            else:
                await msg.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–∫–ª–∞–¥–∫–∏.")

@dp.message_handler(lambda m: m.text == "üî• –¢—Ä–µ–Ω–¥–∏")
@dp.message_handler(commands=["trending"])
async def show_trending_news(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/trending")
        if resp.status == 200:
            trending = await resp.json()
            if trending:
                response_text = "üìà –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–µ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n"
                for item in trending:
                    response_text += f"‚ñ™Ô∏è *{item['title']}*\n"
                    response_text += f"[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({item['link']})\n\n"
                await msg.answer(response_text, parse_mode="Markdown")
            else:
                await msg.answer("ü§∑‚Äç‚ôÄÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—Ä–µ–Ω–¥–∏.")

@dp.message_handler(lambda m: m.text == "üîç –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω")
@dp.message_handler(commands=["search"])
async def search_news_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω.
    """
    await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω:")
    await SearchNewsStates.waiting_for_search_query.set()

@dp.message_handler(state=SearchNewsStates.waiting_for_search_query)
async def process_search_query(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
    """
    search_query = msg.text
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/news/search", params={"query": search_query, "user_id": msg.from_user.id})
        if resp.status == 200:
            news_items = await resp.json()
            if news_items:
                response_text = f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ '{search_query}':\n\n"
                for item in news_items:
                    response_text += f"‚ñ™Ô∏è *{item['title']}*\n"
                    response_text += f"[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({item['link']})\n\n"
                await msg.answer(response_text, parse_mode="Markdown")
            else:
                await msg.answer(f"ü§∑‚Äç‚ôÄÔ∏è –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{search_query}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await msg.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith("react_"))
async def process_reaction_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ä–µ–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –Ω–æ–≤–∏–Ω–∏ (–µ–º–æ–¥–∑—ñ).
    """
    await bot.answer_callback_query(callback_query.id)
    reaction_type = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    user_data = await state.get_data()
    news_id = user_data.get("last_sent_news_id")

    if not news_id:
        await callback_query.message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó.")
        return

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/reactions/add", json={
            "user_id": user_id,
            "news_id": news_id,
            "reaction_type": reaction_type
        })
        if resp.status == 200:
            await callback_query.message.answer(f"–í–∏ –≤—ñ–¥—Ä–µ–∞–≥—É–≤–∞–ª–∏ –Ω–∞ –Ω–æ–≤–∏–Ω—É '{reaction_type}'!")
            # –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ä–µ–∞–∫—Ü—ñ–π, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –º–Ω–æ–∂–∏–Ω–Ω–∏–º —Ä–µ–∞–∫—Ü—ñ—è–º
            # await callback_query.message.edit_reply_markup(reply_markup=None)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—é.")

@dp.callback_query_handler(lambda c: c.data.startswith("rate_"))
async def process_rating_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ü—ñ–Ω–∫—É –Ω–æ–≤–∏–Ω–∏ (–∑—ñ—Ä–æ—á–∫–∏).
    """
    await bot.answer_callback_query(callback_query.id)
    rating_value = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    user_data = await state.get_data()
    news_id = user_data.get("rating_news_id")

    if not news_id:
        await callback_query.message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.")
        return

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/rate", json={
            "user_id": user_id,
            "news_id": news_id,
            "value": rating_value
        })
        if resp.status == 200:
            await callback_query.message.answer(f"–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ –Ω–æ–≤–∏–Ω—É –Ω–∞ {rating_value} –∑—ñ—Ä–æ–∫!")
            # await callback_query.message.edit_reply_markup(reply_markup=None) # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ü—ñ–Ω–∫–∏
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É.")

@dp.message_handler(lambda m: m.text == "üîí –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º")
async def toggle_safe_mode(msg: types.Message):
    """
    –ü–µ—Ä–µ–º–∏–∫–∞—î –±–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º (–≤–º–∏–∫–∞—î/–≤–∏–º–∏–∫–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é NSFW –∫–æ–Ω—Ç–µ–Ω—Ç—É).
    """
    user_id = msg.from_user.id
    async with aiohttp.ClientSession() as session:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É, —â–æ–± –π–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            current_safe_mode = profile.get('safe_mode', False)
            new_safe_mode = not current_safe_mode
            resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "safe_mode": new_safe_mode})
            if resp.status == 200:
                status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_safe_mode else "–≤–∏–º–∫–Ω–µ–Ω–æ"
                await msg.answer(f"‚úÖ –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º {status_text}. –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –±–∞—á–∏—Ç–∏/–Ω–µ –±–∞—á–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç '18+'.")
            else:
                await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –±–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")


@dp.message_handler(lambda m: m.text == "üñêÔ∏è –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É")
async def choose_view_mode(msg: types.Message):
    """
    –î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤–∏–±—Ä–∞—Ç–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–æ–≤–∏–Ω (—Ä—É—á–Ω–∏–π –∞–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç).
    """
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å, —è–∫ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏:", reply_markup=view_mode_keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("set_view_"))
async def set_view_mode(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–æ–≤–∏–Ω.
    """
    await bot.answer_callback_query(callback_query.id)
    view_mode = callback_query.data.replace("set_view_", "")
    user_id = callback_query.from_user.id

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "view_mode": view_mode})
        if resp.status == 200:
            if view_mode == "manual":
                await callback_query.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ —Ä—É—á–Ω–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–æ–≤–∏–Ω. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /myfeed.")
            elif view_mode == "auto":
                await callback_query.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º –¥–∞–π–¥–∂–µ—Å—Ç—É. –ù–æ–≤–∏–Ω–∏ –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ.")
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É.")
    await callback_query.message.delete_reply_markup()

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")
async def create_custom_feed_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –¥–æ–±—ñ—Ä–∫–∏ –Ω–æ–≤–∏–Ω.
    """
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –≤–∞—à–æ—ó –Ω–æ–≤–æ—ó –¥–æ–±—ñ—Ä–∫–∏:")
    await CustomFeedStates.waiting_for_feed_name.set()

@dp.message_handler(state=CustomFeedStates.waiting_for_feed_name)
async def process_custom_feed_name(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞–∑–≤—É –¥–æ–±—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ç–µ–≥–∏.
    """
    await state.update_data(feed_name=msg.text, new_feed_filters={})
    await msg.answer("–¢–µ–ø–µ—Ä –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Ü—ñ—î—ó –¥–æ–±—ñ—Ä–∫–∏. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä., –ø–æ–ª—ñ—Ç–∏–∫–∞, –µ–∫–æ–Ω–æ–º—ñ–∫–∞) –∞–±–æ /skip:")
    await CustomFeedStates.waiting_for_feed_filters_tags.set()

@dp.message_handler(state=CustomFeedStates.waiting_for_feed_filters_tags)
async def process_custom_feed_tags(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–≥–∏ –¥–ª—è –¥–æ–±—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î –¥–∂–µ—Ä–µ–ª–∞.
    """
    if msg.text.lower() != "/skip":
        tags = [t.strip() for t in msg.text.split(',')]
        await state.update_data(new_feed_filters_tags=tags)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä., –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ü—Ä–∞–≤–¥–∞, BBC) –∞–±–æ /skip:")
    await CustomFeedStates.waiting_for_feed_filters_sources.set()

@dp.message_handler(state=CustomFeedStates.waiting_for_feed_filters_sources)
async def process_custom_feed_sources(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –¥–æ–±—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î –º–æ–≤–∏.
    """
    if msg.text.lower() != "/skip":
        sources = [s.strip() for s in msg.text.split(',')]
        await state.update_data(new_feed_filters_sources=sources)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –º–æ–≤–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä., uk, en) –∞–±–æ /skip:")
    await CustomFeedStates.waiting_for_feed_filters_lang.set()

@dp.message_handler(state=CustomFeedStates.waiting_for_feed_filters_lang)
async def process_custom_feed_lang(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –º–æ–≤–∏ –¥–ª—è –¥–æ–±—ñ—Ä–∫–∏ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –¥–∞–Ω—ñ –Ω–∞ backend –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–±—ñ—Ä–∫–∏.
    """
    if msg.text.lower() != "/skip":
        languages = [l.strip() for l in msg.text.split(',')]
        await state.update_data(new_feed_filters_lang=languages)

    user_data = await state.get_data()
    feed_name = user_data['feed_name']
    filters = {}
    if 'new_feed_filters_tags' in user_data:
        filters['tags'] = user_data['new_feed_filters_tags']
    if 'new_feed_filters_sources' in user_data:
        filters['sources'] = user_data['new_feed_filters_sources']
    if 'new_feed_filters_lang' in user_data:
        filters['languages'] = user_data['new_feed_filters_lang']

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/custom_feeds/create", json={
            "user_id": msg.from_user.id,
            "feed_name": feed_name,
            "filters": filters
        })
        if resp.status == 200:
            await msg.answer(f"‚úÖ –î–æ–±—ñ—Ä–∫–∞ '{feed_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()

@dp.message_handler(lambda m: m.text == "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")
async def switch_custom_feed_start(msg: types.Message):
    """
    –î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ –æ–¥–Ω—É –∑—ñ —Å–≤–æ—ó—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–æ–±—ñ—Ä–æ–∫.
    """
    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/custom_feeds/{msg.from_user.id}")
        if resp.status == 200:
            feeds = await resp.json()
            if feeds:
                keyboard = InlineKeyboardMarkup(row_width=1)
                for feed in feeds:
                    keyboard.add(InlineKeyboardButton(feed['feed_name'], callback_data=f"switch_feed_{feed['id']}"))
                await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–æ–±—ñ—Ä–∫—É, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è:", reply_markup=keyboard)
            else:
                await msg.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–æ–±—ñ—Ä–æ–∫. –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é '‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É'.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞—à—ñ –¥–æ–±—ñ—Ä–∫–∏.")

@dp.callback_query_handler(lambda c: c.data.startswith("switch_feed_"))
async def process_switch_feed(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–æ–±—ñ—Ä–∫–∏ —Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—î –Ω–∞ –Ω–µ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await bot.answer_callback_query(callback_query.id)
    feed_id = int(callback_query.data.replace("switch_feed_", ""))
    user_id = callback_query.from_user.id

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/custom_feeds/switch", json={
            "user_id": user_id,
            "feed_id": feed_id
        })
        if resp.status == 200:
            await callback_query.message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ –¥–æ–±—ñ—Ä–∫—É ID: {feed_id}.")
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await callback_query.message.delete_reply_markup() # –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É

# === –ü—Ä–µ–º—ñ—É–º –ü—ñ–¥–ø–∏—Å–∫–∞ ===
@dp.message_handler(lambda m: m.text == "üí∞ –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞")
async def premium_subscription_start(msg: types.Message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î —ó—ó –æ—Ñ–æ—Ä–º–∏—Ç–∏.
    """
    await msg.answer("üöÄ –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, —Ç–∞–∫–∏—Ö —è–∫:\n"
                     "- –ü–µ—Ä–µ–∫–ª–∞–¥ —É—Å—ñ—Ö –º–æ–≤\n- –ü–æ—à—É–∫ –≤ –∞—Ä—Ö—ñ–≤—ñ –Ω–æ–≤–∏–Ω\n- –ë—ñ–ª—å—à–µ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤\n- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω –Ω–∞ –¥–æ–≤–≥–∏–π —Ç–µ—Ä–º—ñ–Ω\n\n"
                     f"–í–∞—Ä—Ç—ñ—Å—Ç—å: $9.99/–º—ñ—Å—è—Ü—å (–º–æ–∫–æ–≤–∞–Ω–æ). –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É? {MONOBANK_CARD_NUMBER}", # –í–∏–≤–æ–¥–∏–º–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏
                     reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", callback_data="buy_premium")))

@dp.callback_query_handler(lambda c: c.data == "buy_premium")
async def confirm_premium_purchase(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ (–º–æ–∫–æ–≤–∞–Ω–æ).
    """
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "is_premium": True})
        if resp.status == 200:
            await callback_query.message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à–∞ –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω—ñ–≤!")
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await callback_query.message.delete_reply_markup()

# === Email-—Ä–æ–∑—Å–∏–ª–∫–∞ ===
@dp.message_handler(lambda m: m.text == "üíå Email-—Ä–æ–∑—Å–∏–ª–∫–∞")
async def email_subscription_start(msg: types.Message):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ email-—Ä–æ–∑—Å–∏–ª–∫—É.
    """
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–æ–≤–∏–Ω:")
    await EmailSubscriptionStates.waiting_for_email.set()

@dp.message_handler(state=EmailSubscriptionStates.waiting_for_email)
async def process_email_for_subscription(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏.
    """
    user_email = msg.text
    if "@" not in user_email or "." not in user_email:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏.")
        return

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": msg.from_user.id, "email": user_email})
        if resp.status == 200:
            await msg.answer("–í–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=digest_frequency_keyboard)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.")
    await state.finish() # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ü–µ–π —Å—Ç–∞–Ω, –ø–æ–¥–∞–ª—å—à–∞ –≤–∑–∞—î–º–æ–¥—ñ—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∫–æ–ª–±–µ–∫–æ–º digest_freq_


@dp.message_handler(lambda m: m.text == "üîî –ê–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
async def toggle_auto_notifications(msg: types.Message):
    """
    –ü–µ—Ä–µ–º–∏–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏.
    """
    user_id = msg.from_user.id
    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            current_auto_notifications = profile.get('auto_notifications', False)
            new_auto_notifications = not current_auto_notifications
            resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "auto_notifications": new_auto_notifications})
            if resp.status == 200:
                status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_auto_notifications else "–≤–∏–º–∫–Ω–µ–Ω–æ"
                await msg.answer(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ {status_text}.")
            else:
                await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω—å.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")


@dp.message_handler(commands=["invite"])
async def invite_friend(msg: types.Message):
    """
    –ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    """
    user_id = msg.from_user.id
    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/invite/generate", json={"inviter_user_id": user_id})
        if resp.status == 200:
            result = await resp.json()
            invite_code = result['invite_code']
            # bot.get_me().await.username –æ—Ç—Ä–∏–º—É—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–æ—Ç–∞
            await msg.answer(f"–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –π–æ–º—É —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: `https://t.me/{ (await bot.get_me()).username }?start={invite_code}`\n\n"
                             "–ö–æ–ª–∏ –≤–∞—à –¥—Ä—É–≥ –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–æ–Ω—É—Å!", parse_mode="Markdown")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è.")


@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_main_menu(msg: types.Message):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await msg.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=main_keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
