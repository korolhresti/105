# telegram_handlers.py ‚Äî –ú—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram AI News –±–æ—Ç–∞
# –¶–µ–π —Ñ–∞–π–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ webapp.py –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Webhook

import os
import aiohttp
from datetime import datetime
import json
from aiogram import Dispatcher, Bot, types
# –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Aiogram v3+
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode # –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è Markdown V2


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è MarkdownV2
def escape_markdown_v2(text: str) -> str:
    """
    –ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ MarkdownV2 —É –Ω–∞–¥–∞–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ.
    """
    if not isinstance(text, (str, int, float)): # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç–∞–∫–æ–∂ —á–∏—Å–ª–∞
        text = str(text) # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ –Ω–µ —Ä—è–¥–æ–∫

    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –≤ MarkdownV2
    # https://core.telegram.org/bots/api#markdownv2-style
    # –í–∞–∂–ª–∏–≤–æ: –∑–≤–æ—Ä–æ—Ç–Ω–∏–π —Å–ª–µ—à `\` —Å–∞–º –ø–æ —Å–æ–±—ñ –ø–æ—Ç—Ä–µ–±—É—î –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è
    special_chars = [
        '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+',
        '-', '=', '|', '{', '}', '.', '!'
    ]
    
    escaped_text = text
    for char in special_chars:
        # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª, —è–∫—â–æ –≤—ñ–Ω —î –≤ —Ç–µ–∫—Å—Ç—ñ
        # –¶–µ –ø—Ä–æ—Å—Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è, –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –ø–∞—Ä—Å–µ—Ä,
        # —â–æ –≤—Ä–∞—Ö–æ–≤—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ `.` –≤ URL)
        escaped_text = escaped_text.replace(char, '\\' + char)
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é URL, –∞–ª–µ —Ç–∞–∫–æ–∂ —î —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ MDV2
    # –¶–µ —Å–ø—Ä–æ–±–∞ –∑—Ä–æ–±–∏—Ç–∏ URL –±—ñ–ª—å—à "–±–µ–∑–ø–µ—á–Ω–∏–º–∏" –±–µ–∑ –Ω–∞–¥–º—ñ—Ä–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è
    if 'http' in text or 'https' in text:
        # –ù–µ –µ–∫—Ä–∞–Ω—É—î–º–æ `/` —É URL
        escaped_text = escaped_text.replace('\\/', '/')
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –≤–∏–Ω—è—Ç–∫–∏, —è–∫—â–æ —Ü–µ –≤–∏–∫–ª–∏–∫–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ URL
    
    return escaped_text


# ==== STATES (–°—Ç–∞–Ω–∏ –¥–ª—è FSM) ====
class AddSourceStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞."""
    waiting_for_source_name = State()
    waiting_for_source_link = State()
    waiting_for_source_type = State()

class AddNewsStates(StatesGroup): # –î–ª—è –∞–¥–º—ñ–Ω—ñ–≤/–∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—ñ–≤
    """–°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏ –≤—Ä—É—á–Ω—É."""
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_lang = State()
    waiting_for_country = State()
    waiting_for_tags = State()
    waiting_for_source_name = State()
    waiting_for_link = State()
    waiting_for_media = State() # Photo/file_id

class SearchNewsStates(StatesGroup):
    """–°—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω."""
    waiting_for_search_query = State()

class ReportNewsStates(StatesGroup):
    """–°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∫–∞—Ä–≥."""
    waiting_for_report_reason = State()
    waiting_for_news_id_for_report = State()

class FeedbackStates(StatesGroup):
    """–°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–≥—É–∫—ñ–≤."""
    waiting_for_feedback_message = State()

class FilterStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤."""
    waiting_for_filter_tag = State()
    waiting_for_filter_category = State()
    waiting_for_filter_source = State()
    waiting_for_filter_language = State()
    waiting_for_filter_country = State()
    waiting_for_filter_content_type = State()

class CustomFeedStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–æ–±—ñ—Ä–∫–∞–º–∏."""
    waiting_for_feed_name = State()
    waiting_for_feed_filters_tags = State()
    waiting_for_feed_filters_sources = State()
    waiting_for_feed_filters_languages = State()

class ProfileSettingsStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    waiting_for_language_change = State()
    waiting_for_country_change = State()
    waiting_for_email = State()
    waiting_for_view_mode = State()

# == –ö–õ–ê–í–Ü–ê–¢–£–†–ò ==
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üì∞ –ù–æ–≤–∏–Ω–∏"), KeyboardButton(text="üéØ –§—ñ–ª—å—Ç—Ä–∏")],
    [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton(text="üì¨ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")],
    [KeyboardButton(text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"), KeyboardButton(text="‚ùó –°–∫–∞—Ä–≥–∞")],
    [KeyboardButton(text="üí¨ –í—ñ–¥–≥—É–∫"), KeyboardButton(text="üåê –ú–æ–≤–∞ / –ü–µ—Ä–µ–∫–ª–∞–¥")],
    [KeyboardButton(text="üß† AI-–∞–Ω–∞–ª—ñ–∑")]
])

settings_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üîí –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º"), KeyboardButton(text="‚ú® –ü—Ä–µ–º—ñ—É–º")],
    [KeyboardButton(text="üìß Email —Ä–æ–∑—Å–∏–ª–∫–∞"), KeyboardButton(text="üîî –ê–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")],
    [KeyboardButton(text="üëÅÔ∏è –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É"), KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
])

filters_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä"), KeyboardButton(text="üìù –ú–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏")],
    [KeyboardButton(text="üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏"), KeyboardButton(text="üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")],
    [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")],
    [KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
])

ai_analysis_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üß† AI Summary"), KeyboardButton(text="üîç –§–∞–∫—Ç—á–µ–∫—ñ–Ω–≥")],
    [KeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"), KeyboardButton(text="‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫")],
    [KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
])

extra_features_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É (–ê–¥–º—ñ–Ω)"), KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")],
    [KeyboardButton(text="‚≠ê –û—Ü—ñ–Ω–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É"), KeyboardButton(text="üîñ –ó–∞–∫–ª–∞–¥–∫–∏")],
    [KeyboardButton(text="üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ"), KeyboardButton(text="üìä –¢—Ä–µ–Ω–¥")],
    [KeyboardButton(text="‚úâÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞"), KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
])

# == –•–ï–ù–î–õ–ï–†–ò ==

async def start_command_handler(msg: types.Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start.
    –†–µ—î—Å—Ç—Ä—É—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    user_id = msg.from_user.id
    language_code = msg.from_user.language_code
    country_code = msg.from_user.locale.language if msg.from_user.locale else None
    
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={
            "user_id": user_id,
            "language": language_code,
            "country": country_code
        })
        if resp.status == 200:
            await msg.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ AI News –ë–æ—Ç–∞!", reply_markup=main_keyboard)
        else:
            await msg.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è.")


async def show_news_handler(msg: types.Message):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –æ–¥–Ω—É –Ω–æ–≤—É –Ω–æ–≤–∏–Ω—É, –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ —Ñ—ñ–ª—å—Ç—Ä–∏.
    """
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/news/{user_id}?limit=1")
        if resp.status == 200:
            news_items = await resp.json()
            if news_items:
                news_item = news_items[0]
                await session.post(f"{API_URL}/log_user_activity", json={
                    "user_id": user_id,
                    "news_id": news_item['id'],
                    "action": "view"
                })
                
                # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è MarkdownV2
                title = escape_markdown_v2(news_item['title'])
                content = escape_markdown_v2(news_item['content'])
                source = escape_markdown_v2(news_item['source'])
                link = escape_markdown_v2(news_item['link']) if news_item.get('link') else None

                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(
                    InlineKeyboardButton(text="üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"like_{news_item['id']}"),
                    InlineKeyboardButton(text="üëé –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"dislike_{news_item['id']}"),
                    InlineKeyboardButton(text="üîñ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data=f"save_{news_item['id']}"),
                    InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_{news_item['id']}")
                )
                if news_item.get('link'):
                     keyboard.add(InlineKeyboardButton(text="üåê –ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é", url=news_item['link']))

                await msg.answer(
                    f"*{title}*\n\n"
                    f"{content}\n\n"
                    f"–î–∂–µ—Ä–µ–ª–æ: {source}\n",
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await msg.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∞–±–æ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            await msg.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω.")


async def process_news_interaction_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–ª—è—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ (–ª–∞–π–∫, –¥–∏–∑–ª–∞–π–∫, –∑–±–µ—Ä–µ–≥—Ç–∏, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏).
    """
    await callback_query.bot.answer_callback_query(callback_query.id)
    action, news_id_str = callback_query.data.split('_', 1)
    news_id = int(news_id_str)
    user_id = callback_query.from_user.id
    
    API_URL = os.getenv("WEBAPP_URL")

    interaction_action = ""
    response_text = ""
    if action == "like":
        interaction_action = "like"
        response_text = "‚ù§Ô∏è –ù–æ–≤–∏–Ω—É –ª–∞–π–∫–Ω—É—Ç–æ!"
    elif action == "dislike":
        interaction_action = "dislike"
        response_text = "üíî –ù–æ–≤–∏–Ω–∞ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–∞."
    elif action == "save":
        interaction_action = "save"
        response_text = "üîñ –ù–æ–≤–∏–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏!"
    elif action == "skip":
        interaction_action = "skip"
        response_text = "‚û°Ô∏è –ù–æ–≤–∏–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."

    async with aiohttp.ClientSession() as session:
        if interaction_action == "save":
            resp = await session.post(f"{API_URL}/bookmarks/add", json={"user_id": user_id, "news_id": news_id})
        else:
            resp = await session.post(f"{API_URL}/log_user_activity", json={"user_id": user_id, "news_id": news_id, "action": interaction_action})

        if resp.status == 200:
            await callback_query.message.answer(response_text)
            await callback_query.message.edit_reply_markup(reply_markup=None) # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
            if interaction_action == "skip":
                await show_news_handler(callback_query.message) # –ü–µ—Ä–µ–¥–∞—î–º–æ message –æ–±'—î–∫—Ç
        else:
            await callback_query.message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –≤–∞—à–æ—ó –¥—ñ—ó.")

async def show_filters_menu_handler(msg: types.Message):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤."""
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:", reply_markup=filters_keyboard)

async def add_filter_start_handler(msg: types.Message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞."""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="–¢–µ–≥", callback_data="filter_type_tag"),
        InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback_data="filter_type_category"),
        InlineKeyboardButton(text="–î–∂–µ—Ä–µ–ª–æ", callback_data="filter_type_source"),
        InlineKeyboardButton(text="–ú–æ–≤–∞", callback_data="filter_type_language"),
        InlineKeyboardButton(text="–ö—Ä–∞—ó–Ω–∞", callback_data="filter_type_country"),
        InlineKeyboardButton(text="–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="filter_type_content_type")
    )
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—ñ–ª—å—Ç—Ä–∞, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏:", reply_markup=keyboard)

async def process_filter_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É —Ñ—ñ–ª—å—Ç—Ä–∞ —ñ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è.
    """
    await callback_query.bot.answer_callback_query(callback_query.id)
    filter_type = callback_query.data.replace('filter_type_', '')
    
    await state.update_data(filter_type=filter_type)
    await callback_query.message.answer(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ '{escape_markdown_v2(filter_type)}':", parse_mode=ParseMode.MARKDOWN_V2)
    await FilterStates.waiting_for_filter_tag.set()

async def process_filter_value_handler(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ.
    """
    user_data = await state.get_data()
    filter_type = user_data['filter_type']
    filter_value = msg.text.strip()
    user_id = msg.from_user.id
    
    API_URL = os.getenv("WEBAPP_URL")

    payload = {"user_id": user_id, filter_type: filter_value}
    
    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/filters/update", json=payload)
        if resp.status == 200:
            await msg.answer(f"‚úÖ –§—ñ–ª—å—Ç—Ä '`{escape_markdown_v2(filter_type)}`: `{escape_markdown_v2(filter_value)}`' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    await state.finish()


async def show_my_filters_handler(msg: types.Message):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/filters/{user_id}")
        if resp.status == 200:
            filters = await resp.json()
            if filters:
                filter_text = "*–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:*\n"
                for k, v in filters.items():
                    if v:
                        filter_text += f"\\- *{escape_markdown_v2(k.capitalize())}*: `{escape_markdown_v2(v)}`\n"
                await msg.answer(filter_text, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏.")

async def reset_filters_handler(msg: types.Message):
    """–°–∫–∏–¥–∞—î –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.delete(f"{API_URL}/filters/reset/{user_id}")
        if resp.status == 200:
            await msg.answer("‚úÖ –£—Å—ñ –≤–∞—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def create_custom_feed_start_handler(msg: types.Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –¥–æ–±—ñ—Ä–∫–∏."""
    await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –≤–∞—à–æ—ó –Ω–æ–≤–æ—ó –¥–æ–±—ñ—Ä–∫–∏:")
    await CustomFeedStates.waiting_for_feed_name.set()

async def process_custom_feed_name_handler(msg: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –¥–æ–±—ñ—Ä–∫–∏ —ñ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏."""
    feed_name = msg.text.strip()
    await state.update_data(feed_name=feed_name, filters={})
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Ç–µ–≥–∏", callback_data="add_feed_filter_tags"),
        InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞", callback_data="add_feed_filter_sources"),
        InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –º–æ–≤–∏", callback_data="add_feed_filter_languages"),
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–±—ñ—Ä–∫–∏", callback_data="finish_create_feed")
    )
    await msg.answer(f"–î–æ–±—ñ—Ä–∫–∞ '`{escape_markdown_v2(feed_name)}`' —Å—Ç–≤–æ—Ä–µ–Ω–∞. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –Ω–µ—ó —Ñ—ñ–ª—å—Ç—Ä–∏:", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    await CustomFeedStates.waiting_for_feed_filters_tags.set()


async def add_feed_filter_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É —Ñ—ñ–ª—å—Ç—Ä–∞ –¥–æ –¥–æ–±—ñ—Ä–∫–∏."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    filter_type = callback_query.data.replace('add_feed_filter_', '')
    await state.update_data(current_feed_filter_type=filter_type)
    await callback_query.message.answer(f"–í–≤–µ–¥—ñ—Ç—å {escape_markdown_v2(filter_type)} (—á–µ—Ä–µ–∑ –∫–æ–º—É, —è–∫—â–æ –∫—ñ–ª—å–∫–∞):", parse_mode=ParseMode.MARKDOWN_V2)

async def process_feed_filter_value_handler(msg: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–æ–±—ñ—Ä–∫–∏."""
    user_data = await state.get_data()
    current_feed_filter_type = user_data.get('current_feed_filter_type')
    
    if current_feed_filter_type:
        values = [v.strip() for v in msg.text.split(',') if v.strip()]
        user_data['filters'][current_feed_filter_type] = values
        await state.update_data(filters=user_data['filters'])
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Ç–µ–≥–∏", callback_data="add_feed_filter_tags"),
            InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞", callback_data="add_feed_filter_sources"),
            InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –º–æ–≤–∏", callback_data="add_feed_filter_languages"),
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–±—ñ—Ä–∫–∏", callback_data="finish_create_feed")
        )
        await msg.answer(f"–§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è '`{escape_markdown_v2(current_feed_filter_type)}`' –¥–æ–¥–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏.", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ—ñ–ª—å—Ç—Ä–∞ –¥–ª—è –¥–æ–±—ñ—Ä–∫–∏.")


async def finish_create_feed_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–±—ñ—Ä–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—ó –Ω–∞ –±–µ–∫–µ–Ω–¥."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    user_data = await state.get_data()
    feed_name = user_data['feed_name']
    filters = user_data['filters']
    user_id = callback_query.from_user.id
    
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/custom_feeds/create", json={
            "user_id": user_id,
            "feed_name": feed_name,
            "filters": filters
        })
        if resp.status == 200:
            await callback_query.message.answer(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –¥–æ–±—ñ—Ä–∫–∞ '`{escape_markdown_v2(feed_name)}`' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            error_details = await resp.json()
            await callback_query.message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É: {escape_markdown_v2(error_details.get('detail', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'))}")
    await state.finish()
    await callback_query.message.delete_reply_markup()


async def switch_custom_feed_menu_handler(msg: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –¥–æ–±—ñ—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/custom_feeds/{user_id}")
        if resp.status == 200:
            feeds = await resp.json()
            if feeds:
                keyboard = InlineKeyboardMarkup(row_width=1)
                for feed in feeds:
                    keyboard.add(InlineKeyboardButton(text=feed['feed_name'], callback_data=f"switch_feed_{feed['id']}"))
                await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–æ–±—ñ—Ä–∫—É, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è:", reply_markup=keyboard)
            else:
                await msg.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–æ–±—ñ—Ä–æ–∫. –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é 'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É'.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞—à—ñ –¥–æ–±—ñ—Ä–∫–∏.")

async def process_switch_feed_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–æ–±—ñ—Ä–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    feed_id = int(callback_query.data.replace("switch_feed_", ""))
    user_id = callback_query.from_user.id
    
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/custom_feeds/switch", json={
            "user_id": user_id,
            "feed_id": feed_id
        })
        if resp.status == 200:
            await callback_query.message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ –¥–æ–±—ñ—Ä–∫—É ID: `{escape_markdown_v2(str(feed_id))}`\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    await callback_query.message.delete_reply_markup()


async def edit_custom_feed_menu_handler(msg: types.Message):
    """–ü—Ä–æ–ø–æ–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –æ–±—Ä–∞—Ç–∏ –¥–æ–±—ñ—Ä–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/custom_feeds/{user_id}")
        if resp.status == 200:
            feeds = await resp.json()
            if feeds:
                keyboard = InlineKeyboardMarkup(row_width=1)
                for feed in feeds:
                    keyboard.add(InlineKeyboardButton(text=feed['feed_name'], callback_data=f"edit_feed_{feed['id']}"))
                await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–æ–±—ñ—Ä–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
            else:
                await msg.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–æ–±—ñ—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞—à—ñ –¥–æ–±—ñ—Ä–∫–∏.")


async def show_settings_handler(msg: types.Message):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=settings_keyboard)

async def toggle_safe_mode_handler(msg: types.Message):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î –±–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            current_safe_mode = profile.get('safe_mode', False)
            new_safe_mode = not current_safe_mode

            update_resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "safe_mode": new_safe_mode})
            if update_resp.status == 200:
                status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_safe_mode else "–≤–∏–º–∫–Ω–µ–Ω–æ"
                await msg.answer(f"‚úÖ –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º {status_text}\\.", parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

async def premium_info_handler(msg: types.Message):
    """–ù–∞–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫—É."""
    user_id = msg.from_user.id
    MONOBANK_CARD_NUMBER = os.getenv("MONOBANK_CARD_NUMBER")
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            is_premium = profile.get('is_premium', False)
            premium_expires_at = profile.get('premium_expires_at')

            if is_premium:
                expires_date = datetime.fromisoformat(premium_expires_at).strftime("%d.%m.%Y %H:%M") if premium_expires_at else "–Ω–µ–≤—ñ–¥–æ–º–æ"
                await msg.answer(f"üéâ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ *–ü—Ä–µ–º—ñ—É–º\\-–ø—ñ–¥–ø–∏—Å–∫–∞* –¥–æ `{escape_markdown_v2(expires_date)}`\\.", parse_mode=ParseMode.MARKDOWN_V2)
            else:
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–ö—É–ø–∏—Ç–∏ –ü—Ä–µ–º—ñ—É–º (100 UAH/–º—ñ—Å)", callback_data="buy_premium")
                )
                await msg.answer("‚ú® –û—Ç—Ä–∏–º–∞–π—Ç–µ *–ü—Ä–µ–º—ñ—É–º\\-–ø—ñ–¥–ø–∏—Å–∫—É* –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π!\n\n"
                                 "**–ü–µ—Ä–µ–≤–∞–≥–∏:**\n"
                                 "\\- –†–æ–∑—à–∏—Ä–µ–Ω–∏–π AI\\-–∞–Ω–∞–ª—ñ–∑\n"
                                 "\\- –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
                                 "\\- –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏\n"
                                 "\\- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
                                 "\\- –Ü–Ω—à—ñ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó\n\n"
                                 f"–í–∞—Ä—Ç—ñ—Å—Ç—å: `100 UAH/–º—ñ—Å—è—Ü—å`\\. –û–ø–ª–∞—Ç–∏—Ç–∏ –º–æ–∂–Ω–∞ –Ω–∞ Monobank: `{escape_markdown_v2(MONOBANK_CARD_NUMBER)}`",
                                 reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

async def handle_buy_premium_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç–∏ –ü—Ä–µ–º—ñ—É–º'."""
    MONOBANK_CARD_NUMBER = os.getenv("MONOBANK_CARD_NUMBER")
    await callback_query.bot.answer_callback_query(callback_query.id, show_alert=True, text="–î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ Monobank –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —ñ–Ω—à–∏–º –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–º –¥–æ–¥–∞—Ç–∫–æ–º —Ç–∞ –ø–µ—Ä–µ–∫–∞–∂—ñ—Ç—å 100 UAH –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∞—à –ø—Ä–µ–º—ñ—É–º –±—É–¥–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω.")
    await callback_query.message.answer(f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó *–ü—Ä–µ–º—ñ—É–º\\-–ø—ñ–¥–ø–∏—Å–∫–∏* –ø–µ—Ä–µ–∫–∞–∂—ñ—Ç—å `100 UAH` –Ω–∞ –∫–∞—Ä—Ç–∫—É Monobank: `{escape_markdown_v2(MONOBANK_CARD_NUMBER)}`\\.\n\n"
                                        "–ê–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def email_subscription_menu_handler(msg: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è email-—Ä–æ–∑—Å–∏–ª–∫–∞–º–∏."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            user_email = profile.get('email')

            if user_email:
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ Email", callback_data="change_email"),
                    InlineKeyboardButton(text="–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ Email", callback_data="unsubscribe_email")
                )
                await msg.answer(f"–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ Email\\-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: `{escape_markdown_v2(user_email)}`\\.", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ Email", callback_data="add_email")
                )
                await msg.answer("–£ –≤–∞—Å —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ Email\\-—Ä–æ–∑—Å–∏–ª–∫–∞\\. –î–æ–¥–∞–π—Ç–µ –≤–∞—à—É Email\\-–∞–¥—Ä–µ—Å—É:", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

async def request_email_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î Email –∞–¥—Ä–µ—Å—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É Email\\-–∞–¥—Ä–µ—Å—É:", parse_mode=ParseMode.MARKDOWN_V2)
    await ProfileSettingsStates.waiting_for_email.set()

async def process_email_input_handler(msg: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É Email –∞–¥—Ä–µ—Å—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—ó."""
    user_id = msg.from_user.id
    email = msg.text.strip()
    
    API_URL = os.getenv("WEBAPP_URL")

    if "@" not in email or "." not in email:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É Email\\-–∞–¥—Ä–µ—Å—É\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "email": email})
        if resp.status == 200:
            await msg.answer(f"‚úÖ –í–∞—à—É Email\\-–∞–¥—Ä–µ—Å—É `{escape_markdown_v2(email)}` —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ Email\\. –ú–æ–∂–ª–∏–≤–æ, —Ü—è –∞–¥—Ä–µ—Å–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def unsubscribe_email_callback(callback_query: types.CallbackQuery):
    """–í—ñ–¥–ø–∏—Å—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ email-—Ä–æ–∑—Å–∏–ª–æ–∫."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "email": None})
        if resp.status == 200:
            await callback_query.message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ Email\\-—Ä–æ–∑—Å–∏–ª–∫–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ Email\\-—Ä–æ–∑—Å–∏–ª–∫–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def toggle_auto_notifications_handler(msg: types.Message):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            current_auto_notifications = profile.get('auto_notifications', False)
            new_auto_notifications = not current_auto_notifications

            resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "auto_notifications": new_auto_notifications})
            if resp.status == 200:
                status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_auto_notifications else "–≤–∏–º–∫–Ω–µ–Ω–æ"
                await msg.answer(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ {status_text}\\.", parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ\\-—Å–ø–æ–≤—ñ—â–µ–Ω—å\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def set_view_mode_handler(msg: types.Message):
    """–î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –æ–±—Ä–∞—Ç–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–æ–≤–∏–Ω."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        profile_resp = await session.get(f"{API_URL}/users/{user_id}/profile")
        if profile_resp.status == 200:
            profile = await profile_resp.json()
            current_view_mode = profile.get('view_mode', 'manual')

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton(text="–†—É—á–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ (MyFeed)", callback_data="set_view_mode_manual"),
                InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="set_view_mode_auto")
            )
            await msg.answer(f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É: *{escape_markdown_v2(current_view_mode)}*\\.\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–µ–∂–∏–º:", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def process_view_mode_selection_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–æ–≤–∏–Ω."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    new_view_mode = callback_query.data.replace('set_view_mode_', '')
    user_id = callback_query.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "view_mode": new_view_mode})
        if resp.status == 200:
            await callback_query.message.answer(f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ *{escape_markdown_v2(new_view_mode)}*\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await callback_query.message.delete_reply_markup()

async def daily_digest_menu_handler(msg: types.Message):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—é —Ä–æ–∑—Å–∏–ª–∫–æ—é."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —â–æ–¥–µ–Ω–Ω—É", callback_data="subscribe_daily_daily"),
        InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø–æ–≥–æ–¥–∏–Ω–Ω—É", callback_data="subscribe_daily_hourly"),
        InlineKeyboardButton(text="–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", callback_data="unsubscribe_daily")
    )
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–æ–≤–∏–Ω:", reply_markup=keyboard)

async def process_subscribe_daily_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç –∑ —Ä—ñ–∑–Ω–æ—é —á–∞—Å—Ç–æ—Ç–æ—é."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    frequency = callback_query.data.replace('subscribe_daily_', '')
    user_id = callback_query.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/subscriptions/update", json={"user_id": user_id, "frequency": frequency})
        if resp.status == 200:
            await callback_query.message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ `{escape_markdown_v2(frequency)}` –¥–∞–π–¥–∂–µ—Å—Ç\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await callback_query.message.delete_reply_markup()

async def process_unsubscribe_daily_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–∏—Å–∫—É –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/subscriptions/unsubscribe", params={"user_id": user_id})
        if resp.status == 200:
            await callback_query.message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–æ–∫\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await callback_query.message.delete_reply_markup()

async def show_analytics_handler(msg: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/analytics/{user_id}")
        if resp.status == 200:
            analytics_data = await resp.json()
            if analytics_data:
                # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è MarkdownV2
                viewed = escape_markdown_v2(str(analytics_data.get('viewed', 0)))
                saved = escape_markdown_v2(str(analytics_data.get('saved', 0)))
                read_full_count = escape_markdown_v2(str(analytics_data.get('read_full_count', 0)))
                skipped_count = escape_markdown_v2(str(analytics_data.get('skipped_count', 0)))
                liked_count = escape_markdown_v2(str(analytics_data.get('liked_count', 0)))
                comments_count = escape_markdown_v2(str(analytics_data.get('comments_count', 0)))
                sources_added_count = escape_markdown_v2(str(analytics_data.get('sources_added_count', 0)))
                level = escape_markdown_v2(str(analytics_data.get('level', 1)))
                badges = escape_markdown_v2(', '.join(analytics_data.get('badges', [])) if analytics_data.get('badges') else '–ù–µ–º–∞—î')
                last_active_dt = datetime.fromisoformat(analytics_data['last_active']) if analytics_data.get('last_active') else None
                last_active = escape_markdown_v2(last_active_dt.strftime('%d.%m.%Y %H:%M') if last_active_dt else '–ù–µ–≤—ñ–¥–æ–º–æ')

                stats_text = (
                    "*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    f"\\- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –Ω–æ–≤–∏–Ω: `{viewed}`\n"
                    f"\\- –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–∏–Ω: `{saved}`\n"
                    f"\\- –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é: `{read_full_count}`\n"
                    f"\\- –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–æ–≤–∏–Ω: `{skipped_count}`\n"
                    f"\\- –í–ø–æ–¥–æ–±–∞–Ω–æ –Ω–æ–≤–∏–Ω: `{liked_count}`\n"
                    f"\\- –ó–∞–ª–∏—à–µ–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: `{comments_count}`\n"
                    f"\\- –î–æ–¥–∞–Ω–æ –¥–∂–µ—Ä–µ–ª: `{sources_added_count}`\n"
                    f"\\- –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: `{level}`\n"
                    f"\\- –í–∞—à—ñ –±–µ–π–¥–∂—ñ: `{badges}`\n"
                    f"\\- –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: `{last_active}`"
                )
                await msg.answer(stats_text, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É.")

async def start_report_process_handler(msg: types.Message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –ø–æ–¥–∞—á—ñ —Å–∫–∞—Ä–≥–∏."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="–ù–∞ –Ω–æ–≤–∏–Ω—É", callback_data="report_news"),
        InlineKeyboardButton(text="–ó–∞–≥–∞–ª—å–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞", callback_data="report_general")
    )
    await msg.answer("–ù–∞ —â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –ø–æ–¥–∞—Ç–∏ —Å–∫–∞—Ä–≥—É?", reply_markup=keyboard)

async def process_report_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î —Ç–∏–ø —Å–∫–∞—Ä–≥–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    report_type = callback_query.data.replace('report_', '')
    await state.update_data(report_type=report_type)

    if report_type == "news":
        await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å *ID –Ω–æ–≤–∏–Ω–∏*, –Ω–∞ —è–∫—É –≤–∏ —Å–∫–∞—Ä–∂–∏—Ç–µ—Å—å\\.", parse_mode=ParseMode.MARKDOWN_V2)
        await ReportNewsStates.waiting_for_news_id_for_report.set()
    else: # report_general
        await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)
        await ReportNewsStates.waiting_for_report_reason.set()


async def process_news_id_for_report_handler(msg: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Å–∫–∞—Ä–≥–∏ —Ç–∞ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É."""
    news_id_str = msg.text.strip()
    if not news_id_str.isdigit():
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID –Ω–æ–≤–∏–Ω–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return
    await state.update_data(news_id=int(news_id_str))
    await msg.answer("–î—è–∫—É—î–º–æ\\. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–æ—ó —Å–∫–∞—Ä–≥–∏ –Ω–∞ —Ü—é –Ω–æ–≤–∏–Ω—É\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await ReportNewsStates.waiting_for_report_reason.set()

async def process_report_reason_handler(msg: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—ó –Ω–∞ –±–µ–∫–µ–Ω–¥."""
    user_data = await state.get_data()
    report_type = user_data['report_type']
    news_id = user_data.get('news_id')
    reason = msg.text.strip()
    user_id = msg.from_user.id
    
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/report", json={
            "user_id": user_id,
            "news_id": news_id,
            "reason": reason
        })
        if resp.status == 200:
            await msg.answer("‚úÖ –í–∞—à—É —Å–∫–∞—Ä–≥—É –æ—Ç—Ä–∏–º–∞–Ω–æ\\. –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É\\!", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–∫–∞—Ä–≥—É\\. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def start_feedback_process_handler(msg: types.Message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–∞–ª–∏—à–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É."""
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫, —ñ –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Ä–∞—Ö—É—î–º–æ –π–æ–≥–æ\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await FeedbackStates.waiting_for_feedback_message.set()

async def process_feedback_message_handler(msg: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –π–æ–≥–æ –Ω–∞ –±–µ–∫–µ–Ω–¥."""
    feedback_message = msg.text.strip()
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/feedback", json={
            "user_id": user_id,
            "message": feedback_message
        })
        if resp.status == 200:
            await msg.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫\\!", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–≥—É–∫\\. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def language_translate_handler(msg: types.Message):
    """–ú–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–æ–≤–∏–Ω."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É", callback_data="change_interface_lang"),
        InlineKeyboardButton(text="–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–æ–≤–∏–Ω", callback_data="toggle_news_translation")
    )
    await msg.answer("üåç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –º–æ–≤–∏:", reply_markup=keyboard)

async def request_interface_lang_callback(callback_query: types.CallbackQuery):
    """–ó–∞–ø–∏—Ç—É—î –Ω–æ–≤—É –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –Ω–æ–≤–æ—ó –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `en` –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó, `uk` –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó)\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await ProfileSettingsStates.waiting_for_language_change.set()

async def process_interface_lang_change_handler(msg: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É."""
    new_lang = msg.text.strip().lower()
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/users/register", json={"user_id": user_id, "language": new_lang})
        if resp.status == 200:
            await msg.answer(f"‚úÖ –ú–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ `{escape_markdown_v2(new_lang)}`\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def toggle_news_translation_callback(callback_query: types.CallbackQuery):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–æ–≤–∏–Ω."""
    await callback_query.bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–æ–≤–∏–Ω –ø–µ—Ä–µ–º–∫–Ω–µ–Ω–∞ (–º–æ–∫–æ–≤–∞–Ω–æ)\\.", parse_mode=ParseMode.MARKDOWN_V2)


async def ai_features_handler(msg: types.Message):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –º–µ–Ω—é —Ñ—É–Ω–∫—Ü—ñ–π AI-–∞–Ω–∞–ª—ñ–∑—É."""
    await msg.answer("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó AI-–∞–Ω–∞–ª—ñ–∑—É:", reply_markup=ai_analysis_keyboard)

async def summary_start_handler(msg: types.Message):
    """–ó–∞–ø–∏—Ç—É—î ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó AI-—Ä–µ–∑—é–º–µ."""
    await msg.answer("üß† –í–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ä–µ–∑—é–º–µ: `/summary ID_–ù–û–í–ò–ù–ò`", parse_mode=ParseMode.MARKDOWN_V2)


async def summary_command_handler(msg: types.Message):
    """–ì–µ–Ω–µ—Ä—É—î AI-—Ä–µ–∑—é–º–µ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏."""
    args = msg.get_args()
    news_id = None
    text_to_summarize = None
    API_URL = os.getenv("WEBAPP_URL")

    if args:
        if args.isdigit():
            news_id = int(args)
        else:
            text_to_summarize = args
    else:
        await msg.answer("üß† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `/summary 123`) –∞–±–æ –Ω–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `/summary –í–∞—à —Ç–µ–∫—Å—Ç —Ç—É—Ç`)", parse_mode=ParseMode.MARKDOWN_V2)
        return

    async with aiohttp.ClientSession() as session:
        payload = {"news_id": news_id}
        if text_to_summarize:
            payload["text"] = text_to_summarize

        resp = await session.post(f"{API_URL}/summary", json=payload)
        if resp.status == 200:
            result = await resp.json()
            summary_text = escape_markdown_v2(result['summary'])
            await msg.answer(f"üß† *–†–µ–∑—é–º–µ:*\n`{summary_text}`", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∑—é–º–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def recommend_handler(msg: types.Message):
    """–ü–æ–∫–∞–∑—É—î AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/recommend/{user_id}")
        if resp.status == 200:
            result = await resp.json()
            recommended = result.get('recommended', [])
            if recommended:
                recommendations_text = "*üìå –í–∞–º –º–æ–∂—É—Ç—å —Å–ø–æ–¥–æ–±–∞—Ç–∏—Å—å —Ü—ñ –Ω–æ–≤–∏–Ω–∏:*\n\n"
                for item in recommended:
                    title_escaped = escape_markdown_v2(item['title'])
                    recommendations_text += f"\\- `{escape_markdown_v2(str(item['id']))}`: {title_escaped}\n"
                await msg.answer(recommendations_text, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —á–∏—Ç–∞—Ç–∏, —â–æ–± AI –∑–º—ñ–≥ –∫—Ä–∞—â–µ –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ—Ç–∏!")
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.")

async def fact_check_start_handler(msg: types.Message):
    """–ó–∞–ø–∏—Ç—É—î ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥—É."""
    await msg.answer("üîç –í–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥—É: `/verify ID_–ù–û–í–ò–ù–ò`", parse_mode=ParseMode.MARKDOWN_V2)

async def verify_command_handler(msg: types.Message):
    """–í–∏–∫–æ–Ω—É—î —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏."""
    args = msg.get_args()
    if not args or not args.isdigit():
        await msg.answer("üîç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –Ω–æ–≤–∏–Ω–∏: `/verify 123`", parse_mode=ParseMode.MARKDOWN_V2)
        return
    news_id = int(args)
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/verify/{news_id}")
        if resp.status == 200:
            result = await resp.json()
            is_fake_status = "‚ùå –§–µ–π–∫!" if result['is_fake'] else "‚úÖ –î–æ—Å—Ç–æ–≤—ñ—Ä–Ω–∞ –Ω–æ–≤–∏–Ω–∞"
            confidence = round(result['confidence'] * 100)
            source = escape_markdown_v2(result['source'])
            await msg.answer(f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥—É –Ω–æ–≤–∏–Ω–∏ ID `{escape_markdown_v2(str(news_id))}`:*\n\n"
                             f"–°—Ç–∞—Ç—É—Å: `{is_fake_status}`\n"
                             f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å AI: `{escape_markdown_v2(str(confidence))}`%\\.\n"
                             f"–î–∂–µ—Ä–µ–ª–æ: `{source}`",
                             parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥ –¥–ª—è —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏.")

async def rewrite_headline_start_handler(msg: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—É–≤–∞–Ω–Ω—è."""
    await msg.answer("‚úçÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏:")
    await state.set_state('waiting_for_headline_to_rewrite')

async def process_headline_rewrite_handler(msg: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ–ø–∏—Å—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI."""
    original_headline = msg.text.strip()
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/ai/rewrite_headline", json={"text": original_headline})
        if resp.status == 200:
            result = await resp.json()
            rewritten = escape_markdown_v2(result['rewritten_headline'])
            await msg.answer(f"‚úÖ *–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:*\n`{escape_markdown_v2(original_headline)}`\n\n"
                             f"*‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–∏–π AI:*\n`{rewritten}`",
                             parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫.")
    await state.finish()

# == –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–Ω–µ –≤ –º–µ–Ω—é AI-–∞–Ω–∞–ª—ñ–∑—É) ==

async def add_news_admin_start_handler(msg: types.Message):
    """
    –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏ –≤—Ä—É—á–Ω—É (–¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤).
    """
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–∑–∞–≥–æ–ª–æ–≤–æ–∫* –Ω–æ–≤–∏–Ω–∏:", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_title.set()

async def process_news_title_handler(msg: types.Message, state: FSMContext):
    await state.update_data(title=msg.text)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–ø–æ–≤–Ω–∏–π –∑–º—ñ—Å—Ç* –Ω–æ–≤–∏–Ω–∏:", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_content.set()

async def process_news_content_handler(msg: types.Message, state: FSMContext):
    await state.update_data(content=msg.text)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–º–æ–≤—É* –Ω–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `uk`, `en`):", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_lang.set()

async def process_news_lang_handler(msg: types.Message, state: FSMContext):
    await state.update_data(lang=msg.text.lower())
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–∫—Ä–∞—ó–Ω—É* –Ω–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `UA`, `US`):", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_country.set()

async def process_news_country_handler(msg: types.Message, state: FSMContext):
    await state.update_data(country=msg.text.upper())
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *—Ç–µ–≥–∏* –¥–ª—è –Ω–æ–≤–∏–Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `–ø–æ–ª—ñ—Ç–∏–∫–∞, –µ–∫–æ–Ω–æ–º—ñ–∫–∞`):", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_tags.set()

async def process_news_tags_handler(msg: types.Message, state: FSMContext):
    tags = [tag.strip() for tag in msg.text.split(',') if tag.strip()]
    await state.update_data(tags=tags)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–Ω–∞–∑–≤—É –¥–∂–µ—Ä–µ–ª–∞* –Ω–æ–≤–∏–Ω–∏:", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_source_name.set()

async def process_news_source_name_handler(msg: types.Message, state: FSMContext):
    await state.update_data(source=msg.text)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–ø–æ—Å–∏–ª–∞–Ω–Ω—è* –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–æ–≤–∏–Ω—É (URL, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ `-`):", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_link.set()

async def process_news_link_handler(msg: types.Message, state: FSMContext):
    link = msg.text.strip()
    await state.update_data(link=link if link != '-' else None)
    await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å *—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ* –∞–±–æ —ñ–Ω—à–∏–π –º–µ–¥—ñ–∞\\-—Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–∏–Ω–∏, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å `-` —è–∫—â–æ –Ω–µ–º–∞—î:", parse_mode=ParseMode.MARKDOWN_V2)
    await AddNewsStates.waiting_for_media.set()

async def process_news_media_handler(msg: types.Message, state: FSMContext):
    file_id = None
    media_type = None
    if msg.photo:
        file_id = msg.photo[-1].file_id # –û–±–∏—Ä–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–æ—Ç–æ
        media_type = "photo"
    elif msg.video:
        file_id = msg.video.file_id
        media_type = "video"
    elif msg.document:
        file_id = msg.document.file_id
        media_type = "document"
    elif msg.text == '-':
        pass # –ù–µ–º–∞—î –º–µ–¥—ñ–∞

    await state.update_data(file_id=file_id, media_type=media_type)
    
    news_data = await state.get_data()
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/news/add", json=news_data)
        if resp.status == 200:
            await msg.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–æ–±–∫—É AI\\!", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def add_source_start_handler(msg: types.Message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞."""
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–Ω–∞–∑–≤—É* –¥–∂–µ—Ä–µ–ª–∞:", parse_mode=ParseMode.MARKDOWN_V2)
    await AddSourceStates.waiting_for_source_name.set()

async def process_source_name_handler(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å *–ø–æ—Å–∏–ª–∞–Ω–Ω—è* –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ (URL –∞–±–æ Telegram ID):", parse_mode=ParseMode.MARKDOWN_V2)
    await AddSourceStates.waiting_for_source_link.set()

async def process_source_link_handler(msg: types.Message, state: FSMContext):
    await state.update_data(link=msg.text)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="Telegram", callback_data="source_type_telegram"),
        InlineKeyboardButton(text="RSS", callback_data="source_type_rss"),
        InlineKeyboardButton(text="Website", callback_data="source_type_website"),
        InlineKeyboardButton(text="Twitter", callback_data="source_type_twitter")
    )
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å *—Ç–∏–ø* –¥–∂–µ—Ä–µ–ª–∞:", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    await AddSourceStates.waiting_for_source_type.set()

async def process_source_type_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.bot.answer_callback_query(callback_query.id)
    source_type = callback_query.data.replace('source_type_', '')
    await state.update_data(type=source_type)

    source_data = await state.get_data()
    user_id = callback_query.from_user.id
    source_data['user_id'] = user_id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/sources/add", json=source_data)
        if resp.status == 200:
            await callback_query.message.answer("‚úÖ –î–∂–µ—Ä–µ–ª–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –í–æ–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await callback_query.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ\\. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()
    await callback_query.message.delete_reply_markup()

async def rate_news_start_handler(msg: types.Message):
    """–ü—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏."""
    await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ü—ñ–Ω–∏—Ç–∏: `/rate ID_–ù–û–í–ò–ù–ò –û–¶–Ü–ù–ö–ê` (–≤—ñ–¥ 1 –¥–æ 5)", parse_mode=ParseMode.MARKDOWN_V2)

async def rate_news_command_handler(msg: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –æ—Ü—ñ–Ω–∫–∏ –Ω–æ–≤–∏–Ω–∏."""
    args = msg.get_args().split()
    if len(args) != 2 or not args[0].isdigit() or not args[1].isdigit():
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ—Ü—ñ–Ω–∫—É (–≤—ñ–¥ 1 –¥–æ 5): `/rate ID_–ù–û–í–ò–ù–ò –û–¶–Ü–ù–ö–ê`", parse_mode=ParseMode.MARKDOWN_V2)
        return

    news_id = int(args[0])
    rating_value = int(args[1])
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    if not (1 <= rating_value <= 5):
        await msg.answer("–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 5\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/rate", json={
            "user_id": user_id,
            "news_id": news_id,
            "value": rating_value
        })
        if resp.status == 200:
            await msg.answer(f"‚úÖ –ù–æ–≤–∏–Ω–∞ ID `{escape_markdown_v2(str(news_id))}` –æ—Ü—ñ–Ω–µ–Ω–∞ –Ω–∞ `{escape_markdown_v2(str(rating_value))}`\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ü—ñ–Ω–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É\\. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–ª–∏ —ó—ó –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def show_bookmarks_handler(msg: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω, –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —É –∑–∞–∫–ª–∞–¥–∫–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/bookmarks/{user_id}")
        if resp.status == 200:
            bookmarks = await resp.json()
            if bookmarks:
                bookmarks_text = "*üîñ –í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–æ–≤–∏–Ω–∏:*\n\n"
                for item in bookmarks:
                    title_escaped = escape_markdown_v2(item['title'])
                    bookmarks_text += f"\\- `{escape_markdown_v2(str(item['id']))}`: {title_escaped}\n"
                await msg.answer(bookmarks_text, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É –∑–∞–∫–ª–∞–¥–∫–∞—Ö\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–∫–ª–∞–¥–∫–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def comments_menu_handler(msg: types.Message):
    """–ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏."""
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏:", reply_markup=InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä", callback_data="add_comment"),
        InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –Ω–æ–≤–∏–Ω–∏", callback_data="view_comments")
    ))

async def start_add_comment_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–∫–∞–∂—ñ—Ç—å *ID –Ω–æ–≤–∏–Ω–∏*, –¥–æ —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state('waiting_for_comment_news_id')

async def process_comment_news_id_handler(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID –Ω–æ–≤–∏–Ω–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return
    await state.update_data(news_id=int(msg.text))
    await msg.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à *–∫–æ–º–µ–Ω—Ç–∞—Ä*:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state('waiting_for_comment_content')

async def process_comment_content_handler(msg: types.Message, state: FSMContext):
    comment_content = msg.text
    user_data = await state.get_data()
    news_id = user_data['news_id']
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/comments/add", json={
            "user_id": user_id,
            "news_id": news_id,
            "content": comment_content
        })
        if resp.status == 200:
            await msg.answer("‚úÖ –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —ñ –æ—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—ó\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def start_view_comments_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–∫–∞–∂—ñ—Ç—å *ID –Ω–æ–≤–∏–Ω–∏*, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state('waiting_for_view_comments_news_id')

async def process_view_comments_news_id_handler(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID –Ω–æ–≤–∏–Ω–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)
        return
    news_id = int(msg.text)
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/comments/{news_id}")
        if resp.status == 200:
            comments = await resp.json()
            if comments:
                comments_text = f"*üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –Ω–æ–≤–∏–Ω–∏ ID `{escape_markdown_v2(str(news_id))}`:*\n\n"
                for comment in comments:
                    comment_content = escape_markdown_v2(comment['content'])
                    user_telegram_id = escape_markdown_v2(str(comment['user_telegram_id']) if comment['user_telegram_id'] else '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                    comments_text += f"\\_\\[–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_telegram_id}\\]\\_ \n`{comment_content}`\n\n"
                await msg.answer(comments_text, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("–î–æ —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏ —â–µ –Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ –≤–æ–Ω–∏ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ\\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.finish()

async def show_trending_news_handler(msg: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Ç—Ä–µ–Ω–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏."""
    API_URL = os.getenv("WEBAPP_URL")

    async with aiohttp.ClientSession() as session:
        resp = await session.get(f"{API_URL}/trending?limit=5")
        if resp.status == 200:
            trending_news = await resp.json()
            if trending_news:
                trend_text = "*üî• –¢—Ä–µ–Ω–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏:*\n\n"
                for item in trending_news:
                    title_escaped = escape_markdown_v2(item['title'])
                    trend_text += f"\\- `{escape_markdown_v2(str(item['id']))}`: {title_escaped}\n"
                await msg.answer(trend_text, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await msg.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω\\.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def invite_friend_handler(msg: types.Message):
    """–ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏."""
    user_id = msg.from_user.id
    API_URL = os.getenv("WEBAPP_URL")
    BOT_USERNAME = os.getenv("BOT_USERNAME", "your_bot_username") # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—é –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è

    async with aiohttp.ClientSession() as session:
        resp = await session.post(f"{API_URL}/invite/generate", json={"inviter_user_id": user_id})
        if resp.status == 200:
            result = await resp.json()
            invite_code = escape_markdown_v2(result['invite_code'])
            await msg.answer(f"–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –π–æ–º—É —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: `https://t.me/{BOT_USERNAME}?start={invite_code}`\n\n"
                             "–ö–æ–ª–∏ –≤–∞—à –¥—Ä—É–≥ –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–æ–Ω—É—Å!", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è\\.", parse_mode=ParseMode.MARKDOWN_V2)

async def back_to_main_menu_handler(msg: types.Message):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await msg.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\\.", reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

async def unknown_message_handler(msg: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –Ω–µ–≤—ñ–¥–æ–º—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    await msg.answer("ü§î –í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É\\. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é `/start`\\.", reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2)


# == –§–£–ù–ö–¶–Ü–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –•–ï–ù–î–õ–ï–†–Ü–í ==
def register_handlers(dp: Dispatcher):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —Ç–∞ FSM —Å—Ç–∞–Ω–∏ —É Aiogram Dispatcher.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –∑ webapp.py.
    """
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message_handler(commands=["start"])(start_command_handler)
    dp.message_handler(commands=["summary"])(summary_command_handler)
    dp.message_handler(commands=["verify"])(verify_command_handler)
    dp.message_handler(commands=["rate"])(rate_news_command_handler)
    dp.message_handler(commands=["invite"])(invite_friend_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.message_handler(lambda m: m.text == "üì∞ –ù–æ–≤–∏–Ω–∏")(show_news_handler)
    dp.message_handler(lambda m: m.text == "üéØ –§—ñ–ª—å—Ç—Ä–∏")(show_filters_menu_handler)
    dp.message_handler(lambda m: m.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")(show_settings_handler)
    dp.message_handler(lambda m: m.text == "üì¨ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")(daily_digest_menu_handler)
    dp.message_handler(lambda m: m.text == "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")(show_analytics_handler)
    dp.message_handler(lambda m: m.text == "‚ùó –°–∫–∞—Ä–≥–∞")(start_report_process_handler)
    dp.message_handler(lambda m: m.text == "üí¨ –í—ñ–¥–≥—É–∫")(start_feedback_process_handler)
    dp.message_handler(lambda m: m.text == "üåê –ú–æ–≤–∞ / –ü–µ—Ä–µ–∫–ª–∞–¥")(language_translate_handler)
    dp.message_handler(lambda m: m.text == "üß† AI-–∞–Ω–∞–ª—ñ–∑")(ai_features_handler)
    dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")(back_to_main_menu_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é AI-–∞–Ω–∞–ª—ñ–∑—É
    dp.message_handler(lambda m: m.text == "üß† AI Summary")(summary_start_handler)
    dp.message_handler(lambda m: m.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")(recommend_handler)
    dp.message_handler(lambda m: m.text == "üîç –§–∞–∫—Ç—á–µ–∫—ñ–Ω–≥")(fact_check_start_handler)
    dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫")(rewrite_headline_start_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    dp.message_handler(lambda m: m.text == "üîí –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º")(toggle_safe_mode_handler)
    dp.message_handler(lambda m: m.text == "‚ú® –ü—Ä–µ–º—ñ—É–º")(premium_info_handler)
    dp.message_handler(lambda m: m.text == "üìß Email —Ä–æ–∑—Å–∏–ª–∫–∞")(email_subscription_menu_handler)
    dp.message_handler(lambda m: m.text == "üîî –ê–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")(toggle_auto_notifications_handler)
    dp.message_handler(lambda m: m.text == "üëÅÔ∏è –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É")(set_view_mode_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    dp.message_handler(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä")(add_filter_start_handler)
    dp.message_handler(lambda m: m.text == "üìù –ú–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∏")(show_my_filters_handler)
    dp.message_handler(lambda m: m.text == "üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏")(reset_filters_handler)
    dp.message_handler(lambda m: m.text == "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")(create_custom_feed_start_handler)
    dp.message_handler(lambda m: m.text == "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")(switch_custom_feed_menu_handler)
    dp.message_handler(lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–æ–±—ñ—Ä–∫—É")(edit_custom_feed_menu_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    dp.message_handler(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É (–ê–¥–º—ñ–Ω)")(add_news_admin_start_handler)
    dp.message_handler(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")(add_source_start_handler)
    dp.message_handler(lambda m: m.text == "‚≠ê –û—Ü—ñ–Ω–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É")(rate_news_start_handler)
    dp.message_handler(lambda m: m.text == "üîñ –ó–∞–∫–ª–∞–¥–∫–∏")(show_bookmarks_handler)
    dp.message_handler(lambda m: m.text == "üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ")(comments_menu_handler)
    dp.message_handler(lambda m: m.text == "üìä –¢—Ä–µ–Ω–¥")(show_trending_news_handler)


    # Callback Query handlers
    dp.callback_query_handler(lambda c: c.data.startswith('like_') or c.data.startswith('dislike_') or c.data.startswith('save_') or c.data.startswith('skip_'))(process_news_interaction_handler)
    dp.callback_query_handler(lambda c: c.data.startswith('filter_type_'))(process_filter_type_handler)
    dp.callback_query_handler(lambda c: c.data.startswith('add_feed_filter_'))(add_feed_filter_handler)
    dp.callback_query_handler(lambda c: c.data == 'finish_create_feed')(finish_create_feed_handler)
    dp.callback_query_handler(lambda c: c.data.startswith("switch_feed_"))(process_switch_feed_handler)
    dp.callback_query_handler(lambda c: c.data == "buy_premium")(handle_buy_premium_callback)
    dp.callback_query_handler(lambda c: c.data == "add_email" or c.data == "change_email")(request_email_input_callback)
    dp.callback_query_handler(lambda c: c.data == "unsubscribe_email")(unsubscribe_email_callback)
    dp.callback_query_handler(lambda c: c.data.startswith('set_view_mode_'))(process_view_mode_selection_callback)
    dp.callback_query_handler(lambda c: c.data.startswith('subscribe_daily_'))(process_subscribe_daily_callback)
    dp.callback_query_handler(lambda c: c.data == "unsubscribe_daily")(process_unsubscribe_daily_callback)
    dp.callback_query_handler(lambda c: c.data.startswith('report_'))(process_report_type_handler)
    dp.callback_query_handler(lambda c: c.data == "change_interface_lang")(request_interface_lang_callback)
    dp.callback_query_handler(lambda c: c.data == "toggle_news_translation")(toggle_news_translation_callback)
    dp.callback_query_handler(lambda c: c.data.startswith('source_type_'))(process_source_type_callback)
    dp.callback_query_handler(lambda c: c.data == "add_comment")(start_add_comment_callback)
    dp.callback_query_handler(lambda c: c.data == "view_comments")(start_view_comments_callback)

    # FSM handlers
    # –í Aiogram v3+ FSMContext.set_state() —Ç–∞ FSMContext.update_data() –æ—á—ñ–∫—É—é—Ç—å state —è–∫ –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
    # –Ø–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ decorator –¥–ª—è message_handler –∑ state=StateGroup.state_name, —Ç–æ state –æ–±'—î–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
    # –î–ª—è `await state.set_state('waiting_for_headline_to_rewrite')` —Ü–µ –º–∞—î –±—É—Ç–∏ `await state.set_state(MyStates.waiting_for_headline_to_rewrite)`
    # –ü—Ä–æ—Ç–µ, —è–∫—â–æ —Ü–µ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Å—Ç–∞–Ω, —ñ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤ StatesGroup, —Ç–æ `set_state('string')` —Ç–µ–∂ –ø—Ä–∞—Ü—é—î
    dp.message_handler(state=FilterStates.waiting_for_filter_tag)(process_filter_value_handler)
    dp.message_handler(state=CustomFeedStates.waiting_for_feed_name)(process_custom_feed_name_handler)
    dp.message_handler(state=CustomFeedStates.waiting_for_feed_filters_tags)(process_feed_filter_value_handler)
    dp.message_handler(state=ProfileSettingsStates.waiting_for_email)(process_email_input_handler)
    dp.message_handler(state=ProfileSettingsStates.waiting_for_language_change)(process_interface_lang_change_handler)
    dp.message_handler(state='waiting_for_headline_to_rewrite')(process_headline_rewrite_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_title)(process_news_title_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_content)(process_news_content_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_lang)(process_news_lang_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_country)(process_news_country_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_tags)(process_news_tags_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_source_name)(process_news_source_name_handler)
    dp.message_handler(state=AddNewsStates.waiting_for_link)(process_news_link_handler)
    dp.message_handler(content_types=['photo', 'video', 'document', 'text'], state=AddNewsStates.waiting_for_media)(process_news_media_handler)
    dp.message_handler(state=AddSourceStates.waiting_for_source_name)(process_source_name_handler)
    dp.message_handler(state=AddSourceStates.waiting_for_source_link)(process_source_link_handler)
    dp.message_handler(state=ReportNewsStates.waiting_for_news_id_for_report)(process_news_id_for_report_handler)
    dp.message_handler(state=ReportNewsStates.waiting_for_report_reason)(process_report_reason_handler)
    dp.message_handler(state=FeedbackStates.waiting_for_feedback_message)(process_feedback_message_handler)
    dp.message_handler(state='waiting_for_comment_news_id')(process_comment_news_id_handler)
    dp.message_handler(state='waiting_for_comment_content')(process_comment_content_handler)
    dp.message_handler(state='waiting_for_view_comments_news_id')(process_view_comments_news_id_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º
    dp.message_handler()(unknown_message_handler)

