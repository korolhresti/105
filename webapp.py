# webapp.py ‚Äî FastAPI backend –¥–ª—è Telegram AI News –±–æ—Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é 500+ —Ñ—É–Ω–∫—Ü—ñ–π
# –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Telegram Webhook

from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
import os
import asyncpg
import json
import random
import asyncio
from collections import defaultdict

# ==== –Ü–º–ø–æ—Ä—Ç Aiogram –¥–ª—è Webhook —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó ====
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ aiogram.fsm.storage.memory
# Aiogram v3+ uses aiogram.fsm.storage.memory
# From aiogram.contrib.fsm_storage.memory import MemoryStorage # –°—Ç–∞—Ä–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è Aiogram v2

# ==== –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É –±–æ—Ç–∞ –∑ telegram_handlers.py ====
from telegram_handlers import register_handlers

app = FastAPI()

# ==== Aiogram Bot & Dispatcher Initialization ====
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Aiogram –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN_V2)
storage = MemoryStorage() # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ MemoryStorage –∑ aiogram.fsm.storage.memory
dp = Dispatcher(bot, storage=storage) # –ü–µ—Ä–µ–¥–∞—á–∞ 'storage' –¥–ª—è Dispatcher

# –û—Ç—Ä–∏–º—É—î–º–æ Gemini API –∫–ª—é—á –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# ==== DATABASE CONNECTION ====
async def get_db_connection():
    try:
        conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
        return conn
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

# (–í–∞—à—ñ BaseModel —Ç—É—Ç, –≤–æ–Ω–∏ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è)
# ==== MODELS ====
class SummaryRequest(BaseModel):
    news_id: Optional[int] = None
    text: Optional[str] = None

class FeedbackRequest(BaseModel):
    user_id: int
    message: str

class RateRequest(BaseModel):
    user_id: int
    news_id: int
    value: int

class BlockRequest(BaseModel):
    user_id: int
    block_type: str # tag, source, language, category
    value: str

class DigestRequest(BaseModel):
    user_id: int
    frequency: Optional[str] = 'daily'

class AnalyticsRequest(BaseModel):
    user_id: int

class ReportRequest(BaseModel):
    user_id: int
    news_id: Optional[int] = None # –ú–æ–∂–µ –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∞ —Å–∫–∞—Ä–≥–∞ –±–µ–∑ ID –Ω–æ–≤–∏–Ω–∏
    reason: str

class SourceRequest(BaseModel):
    user_id: int
    name: str
    link: str
    type: str

class NewsRequest(BaseModel):
    title: str
    content: str
    lang: str
    country: str
    tags: List[str]
    source: str
    link: Optional[str] = None
    published_at: Optional[datetime] = None
    file_id: Optional[str] = None
    media_type: Optional[str] = None
    source_type: Optional[str] = 'manual' # manual, rss, telegram, twitter etc.

class BookmarkRequest(BaseModel):
    user_id: int
    news_id: int

class TranslateRequest(BaseModel):
    text: str
    target_language: str
    source_language: Optional[str] = None # –ó–∞–ª–∏—à–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è

class ReactionRequest(BaseModel):
    user_id: int
    news_id: int
    reaction_type: str # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '‚ù§Ô∏è', 'üòÆ', 'ü§î'

class PollResultRequest(BaseModel):
    user_id: int
    news_id: int
    question: str
    answer: str

class FilterUpdateRequest(BaseModel):
    user_id: int
    tag: Optional[str] = None
    category: Optional[str] = None
    source: Optional[str] = None
    language: Optional[str] = None
    country: Optional[str] = None
    content_type: Optional[str] = None

class CustomFeedRequest(BaseModel):
    user_id: int
    feed_name: str
    filters: Dict[str, Any] # JSONB –ø–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤

class SwitchFeedRequest(BaseModel):
    user_id: int
    feed_id: int

class UserProfileUpdateRequest(BaseModel):
    user_id: int
    language: Optional[str] = None
    country: Optional[str] = None
    safe_mode: Optional[bool] = None
    is_premium: Optional[bool] = None
    email: Optional[str] = None
    auto_notifications: Optional[bool] = None
    view_mode: Optional[str] = None # 'manual' –∞–±–æ 'auto'

class CommentRequest(BaseModel):
    user_id: int
    news_id: int
    content: str
    parent_comment_id: Optional[int] = None

class AdminActionRequest(BaseModel):
    admin_user_id: int # Telegram ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    action_type: str
    target_id: Optional[int] = None
    details: Optional[Dict[str, Any]] = None

class InviteRequest(BaseModel):
    inviter_user_id: int
    invited_user_id: Optional[int] = None # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è

class NewsInteractionRequest(BaseModel):
    user_id: int
    news_id: int
    action: str # view, read_full, skip etc.
    time_spent: Optional[int] = 0 # –î–ª—è 'read_full'


# ==== UTILITY FUNCTIONS (–Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è, —è–∫—â–æ –Ω–µ –±—É–ª–æ —ñ–Ω—à–∏—Ö –≤–∫–∞–∑—ñ–≤–æ–∫) ====
async def update_user_stats(conn, user_id: int, stat_type: str, increment: int = 1):
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ `user_stats`.
    –°—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î, –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π.
    """
    update_clause = ""
    if stat_type == "viewed":
        update_clause = "viewed = user_stats.viewed + $3"
    elif stat_type == "saved":
        update_clause = "saved = user_stats.saved + $3"
    elif stat_type == "reported":
        update_clause = "reported = user_stats.reported + $3"
    elif stat_type == "read_full_count":
        update_clause = "read_full_count = user_stats.read_full_count + $3"
    elif stat_type == "liked_count":
        update_clause = "liked_count = user_stats.liked_count + $3"
    elif stat_type == "disliked_count":
        update_clause = "disliked_count = user_stats.disliked_count + $3"
    elif stat_type == "comments_count":
        update_clause = "comments_count = user_stats.comments_count + $3"
    elif stat_type == "sources_added_count":
        update_clause = "sources_added_count = user_stats.sources_added_count + $3"

    if update_clause:
        await conn.execute(
            f"INSERT INTO user_stats (user_id, {stat_type}, last_active) VALUES ($1, $3, NOW()) ON CONFLICT (user_id) DO UPDATE SET {update_clause}, last_active = NOW()",
            user_id, increment
        )

processing_queue = asyncio.Queue()

async def news_processing_worker():
    """
    –§–æ–Ω–æ–≤–∏–π –≤–æ—Ä–∫–µ—Ä, —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–Ω–∏ –∑ —á–µ—Ä–≥–∏.
    –í–∏–∫–æ–Ω—É—î –º–æ–∫–æ–≤–∞–Ω–∏–π AI-–∞–Ω–∞–ª—ñ–∑ (–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è, —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å, —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥).
    """
    while True:
        news_item_id = await processing_queue.get()
        print(f"–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω–∏ ID: {news_item_id} —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")
        await asyncio.sleep(random.uniform(1, 3))

        conn = await get_db_connection()
        try:
            news = await conn.fetchrow("SELECT content FROM news WHERE id = $1", news_item_id)
            if news:
                topics = random.sample(["–ü–æ–ª—ñ—Ç–∏–∫–∞", "–ï–∫–æ–Ω–æ–º—ñ–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–°–ø–æ—Ä—Ç", "–ö—É–ª—å—Ç—É—Ä–∞", "–ù–∞—É–∫–∞", "–ó–¥–æ—Ä–æ–≤'—è"], k=random.randint(1,3))
                sentiment_map_keys = ["–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π", "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"]
                tone = random.choice(sentiment_map_keys)
                sentiment_score = random.uniform(-1.0, 1.0)
                is_fake = random.random() < 0.1

                await conn.execute(
                    """
                    UPDATE news
                    SET ai_classified_topics = $1, tone = $2, sentiment_score = $3, is_fake = $4
                    WHERE id = $5
                    """,
                    topics, tone, sentiment_score, is_fake, news_item_id
                )
                print(f"–ù–æ–≤–∏–Ω–∞ ID: {news_item_id} –æ–±—Ä–æ–±–ª–µ–Ω–∞ AI.")

            if random.random() < 0.05:
                await conn.execute("UPDATE news SET is_duplicate = TRUE WHERE id = $1", news_item_id)
                print(f"–ù–æ–≤–∏–Ω–∞ ID: {news_item_id} –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –¥—É–±–ª—ñ–∫–∞—Ç.")

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–æ–≤–∏–Ω–∏ ID {news_item_id}: {e}")
        finally:
            if conn:
                await conn.close()
        processing_queue.task_done()

async def cleanup_old_news_task():
    """
    –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –Ω–æ–≤–∏–Ω.
    """
    print("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –Ω–æ–≤–∏–Ω...")
    conn = await get_db_connection()
    try:
        archived_result = await conn.execute(
            """
            INSERT INTO archived_news (original_news_id, title, content, lang, country, tags, source, link, published_at, archived_at)
            SELECT id, title, content, lang, country, tags, source, link, published_at, NOW()
            FROM news
            WHERE expires_at < NOW() AND NOT EXISTS (SELECT 1 FROM archived_news WHERE original_news_id = news.id)
            """
        )
        archived_count = int(archived_result.split()[-1])

        deleted_result = await conn.execute(
            """
            DELETE FROM news
            WHERE expires_at < NOW()
            AND NOT EXISTS (SELECT 1 FROM bookmarks WHERE news_id = news.id)
            """
        )
        deleted_count = int(deleted_result.split()[-1])

        print(f"–ó–∞–∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ: {archived_count}. –í–∏–¥–∞–ª–µ–Ω–æ: {deleted_count} —Å—Ç–∞—Ä–∏—Ö –Ω–æ–≤–∏–Ω.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω: {e}")
    finally:
        if conn:
            await conn.close()

# ==== API ENDPOINTS (–±—ñ–ª—å—à—ñ—Å—Ç—å –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è) ====

@app.post("/users/register")
async def register_user(req: UserProfileUpdateRequest):
    """
    –†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ—Ñ—ñ–ª—å.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval(
            "SELECT id FROM users WHERE telegram_id = $1", req.user_id
        )
        if user_internal_id:
            update_parts = []
            params = []
            param_idx = 1
            if req.language is not None:
                update_parts.append(f"language = ${param_idx}")
                params.append(req.language)
                param_idx += 1
            if req.country is not None:
                update_parts.append(f"country = ${param_idx}")
                params.append(req.country)
                param_idx += 1
            if req.safe_mode is not None:
                update_parts.append(f"safe_mode = ${param_idx}")
                params.append(req.safe_mode)
                param_idx += 1
            if req.is_premium is not None:
                update_parts.append(f"is_premium = ${param_idx}")
                params.append(req.is_premium)
                param_idx += 1
                if req.is_premium:
                    update_parts.append(f"premium_expires_at = ${param_idx}")
                    params.append(datetime.utcnow() + timedelta(days=30))
                    param_idx += 1
                else:
                    update_parts.append(f"premium_expires_at = NULL")
            if req.email is not None:
                update_parts.append(f"email = ${param_idx}")
                params.append(req.email)
                param_idx += 1
            if req.auto_notifications is not None:
                update_parts.append(f"auto_notifications = ${param_idx}")
                params.append(req.auto_notifications)
                param_idx += 1
            if req.view_mode is not None:
                update_parts.append(f"view_mode = ${param_idx}")
                params.append(req.view_mode)
                param_idx += 1

            if update_parts:
                query = f"UPDATE users SET {', '.join(update_parts)} WHERE telegram_id = ${param_idx}"
                params.append(req.user_id)
                await conn.execute(query, *params)
            return {"status": "success", "message": "–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ"}
        else:
            await conn.execute(
                """
                INSERT INTO users (telegram_id, language, country, created_at, safe_mode, is_premium, email, auto_notifications, view_mode)
                VALUES ($1, $2, $3, NOW(), $4, $5, $6, $7, $8)
                """,
                req.user_id, req.language, req.country,
                req.safe_mode if req.safe_mode is not None else False,
                req.is_premium if req.is_premium is not None else False,
                req.email,
                req.auto_notifications if req.auto_notifications is not None else False,
                req.view_mode if req.view_mode is not None else 'manual'
            )
            new_user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
            await update_user_stats(conn, new_user_internal_id, "viewed", 0)
            return {"status": "success", "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ"}
    except asyncpg.exceptions.UniqueViolationError:
        raise HTTPException(status_code=400, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º Telegram ID –∞–±–æ email –≤–∂–µ —ñ—Å–Ω—É—î.")
    finally:
        if conn:
            await conn.close()

@app.get("/users/{user_id}/profile")
async def get_user_profile(user_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ Telegram ID.
    """
    conn = await get_db_connection()
    try:
        profile = await conn.fetchrow(
            "SELECT id, telegram_id, language, country, safe_mode, current_feed_id, is_premium, premium_expires_at, level, badges, email, auto_notifications, view_mode FROM users WHERE telegram_id = $1",
            user_id
        )
        if profile:
            return dict(profile)
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    finally:
        if conn:
            await conn.close()

@app.post("/summary")
async def generate_summary(req: SummaryRequest):
    """
    –ì–µ–Ω–µ—Ä—É—î —Ä–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏ –∑–∞ ID –∞–±–æ –Ω–∞–¥–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à—É–≤–∞–Ω–Ω—è.
    """
    conn = await get_db_connection()
    try:
        if req.news_id:
            cached_summary = await conn.fetchrow(
                "SELECT summary FROM summaries WHERE news_id = $1", req.news_id
            )
            if cached_summary:
                return {"summary": cached_summary['summary']}

        summary_text = f"üß† –†–µ–∑—é–º–µ –¥–ª—è –Ω–æ–≤–∏–Ω–∏ #{req.news_id or '–Ω–∞–¥–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É'}: –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ AI. –¶–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏, —è–∫–∏–π –≤–∏—Å–≤—ñ—Ç–ª—é—î –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏."
        if req.text:
            summary_text = f"üß† –†–µ–∑—é–º–µ –¥–ª—è –Ω–∞–¥–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É: AI-–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–∫–ª–∞–¥ –∑–º—ñ—Å—Ç—É '{req.text[:50]}...'."

        if req.news_id:
            await conn.execute(
                "INSERT INTO summaries (news_id, summary) VALUES ($1, $2) ON CONFLICT (news_id) DO UPDATE SET summary = $2",
                req.news_id, summary_text
            )
        return {"summary": summary_text}
    finally:
        if conn:
            await conn.close()

@app.post("/feedback")
async def save_feedback(req: FeedbackRequest):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –≤—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO feedback (user_id, message) VALUES ($1, $2)",
            user_internal_id, req.message
        )
        return {"status": "saved", "user_id": req.user_id, "message": req.message}
    finally:
        if conn:
            await conn.close()

@app.post("/rate")
async def save_rating(req: RateRequest):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –æ—Ü—ñ–Ω–∫—É –Ω–æ–≤–∏–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    """
    if not (1 <= req.value <= 5):
        raise HTTPException(status_code=400, detail="–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É. –ú–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5.")
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO ratings (user_id, news_id, value) VALUES ($1, $2, $3) ON CONFLICT (user_id, news_id) DO UPDATE SET value = $3",
            user_internal_id, req.news_id, req.value
        )
        return {"status": "rated", "news_id": req.news_id, "value": req.value}
    finally:
        if conn:
            await conn.close()

@app.post("/block")
async def block_entity(req: BlockRequest):
    """
    –î–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç (—Ç–µ–≥, –¥–∂–µ—Ä–µ–ª–æ, –º–æ–≤—É, –∫–∞—Ç–µ–≥–æ—Ä—ñ—é) –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO blocks (user_id, block_type, value) VALUES ($1, $2, $3) ON CONFLICT (user_id, block_type, value) DO NOTHING",
            user_internal_id, req.block_type, req.value
        )
        return {"blocked": True, "type": req.block_type, "value": req.value}
    finally:
        if conn:
            await conn.close()

@app.post("/subscriptions/update")
async def update_subscription(req: DigestRequest):
    """
    –û–Ω–æ–≤–ª—é—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –ø—ñ–¥–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO subscriptions (user_id, active, frequency) VALUES ($1, TRUE, $2) ON CONFLICT (user_id) DO UPDATE SET active = TRUE, frequency = $2",
            user_internal_id, req.frequency
        )
        return {"subscribed": True, "user_id": req.user_id, "frequency": req.frequency}
    finally:
        if conn:
            await conn.close()

@app.post("/subscriptions/unsubscribe")
async def unsubscribe(user_id: int):
    """
    –í—ñ–¥–ø–∏—Å—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–æ–∫.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
        await conn.execute(
            "UPDATE subscriptions SET active = FALSE WHERE user_id = $1", user_internal_id
        )
        return {"status": "success", "message": "–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–æ–∫"}
    finally:
        if conn:
            await conn.close()

@app.get("/analytics/{user_id}")
async def get_analytics(user_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∫–ª—é—á–∞—é—á–∏ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ (—Ä—ñ–≤–µ–Ω—å, –±–µ–π–¥–∂—ñ).
    """
    conn = await get_db_connection()
    try:
        stats = await conn.fetchrow(
            """
            SELECT us.viewed, us.saved, us.reported, us.last_active, us.read_full_count, us.skipped_count,
                   us.liked_count, us.disliked_count, us.comments_count, us.sources_added_count,
                   u.level, u.badges
            FROM user_stats us
            JOIN users u ON us.user_id = u.id
            WHERE u.telegram_id = $1
            """,
            user_id
        )
        if stats:
            return dict(stats)
        
        user_info = await conn.fetchrow(
            "SELECT level, badges FROM users WHERE telegram_id = $1", user_id
        )
        if user_info:
             return {"user_id": user_id, "viewed": 0, "saved": 0, "reported": 0, "last_active": None,
                "read_full_count": 0, "skipped_count": 0, "liked_count": 0, "disliked_count": 0,
                "comments_count": 0, "sources_added_count": 0, "level": user_info['level'], "badges": user_info['badges']}
        
        return {"user_id": user_id, "viewed": 0, "saved": 0, "reported": 0, "last_active": None,
                "read_full_count": 0, "skipped_count": 0, "liked_count": 0, "disliked_count": 0,
                "comments_count": 0, "sources_added_count": 0, "level": 0, "badges": []}
    finally:
        if conn:
            await conn.close()

@app.post("/report")
async def send_report(req: ReportRequest):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Å–∫–∞—Ä–≥—É –Ω–∞ –Ω–æ–≤–∏–Ω—É –∞–±–æ –∑–∞–≥–∞–ª—å–Ω—É –ø—Ä–æ–±–ª–µ–º—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO reports (user_id, news_id, reason) VALUES ($1, $2, $3)",
            user_internal_id, req.news_id, req.reason
        )
        await update_user_stats(conn, user_internal_id, "reported")
        return {"status": "reported", "user_id": req.user_id, "news_id": req.news_id, "reason": req.reason}
    finally:
        if conn:
            await conn.close()

@app.get("/recommend/{user_id}")
async def get_recommendations(user_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        news_items = await conn.fetch(
            "SELECT id, title FROM news OFFSET floor(random() * (SELECT count(*) FROM news)) LIMIT 5"
        )
        recommended_news = [{"id": n['id'], "title": n['title'], "score": round(random.uniform(0.7, 0.99), 2)}
                            for n in news_items]
        return {
            "user_id": user_id,
            "recommended": recommended_news
        }
    finally:
        if conn:
            await conn.close()

@app.get("/verify/{news_id}")
async def verify_news(news_id: int):
    """
    –Ü–º—ñ—Ç—É—î –ø—Ä–æ—Ü–µ—Å —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥—É –Ω–æ–≤–∏–Ω–∏.
    """
    conn = await get_db_connection()
    try:
        news_item = await conn.fetchrow("SELECT is_fake FROM news WHERE id = $1", news_id)
        if news_item:
            return {
                "news_id": news_id,
                "is_fake": news_item['is_fake'],
                "confidence": 0.87 if news_item['is_fake'] else 0.95,
                "source": "AI fact-checker"
            }
        raise HTTPException(status_code=404, detail="–ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    finally:
        if conn:
            await conn.close()

@app.post("/sources/add")
async def add_source(req: SourceRequest):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ –Ω–æ–≤–∏–Ω –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        result = await conn.execute(
            "INSERT INTO sources (name, link, type, added_by_user_id) VALUES ($1, $2, $3, $4)",
            req.name, req.link, req.type, user_internal_id
        )
        if result == "INSERT 0 1":
            await update_user_stats(conn, user_internal_id, "sources_added_count")
            return {"status": "success", "message": "–î–∂–µ—Ä–µ–ª–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ", "source": req.name}
        raise HTTPException(status_code=400, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")
    except asyncpg.exceptions.UniqueViolationError:
        raise HTTPException(status_code=400, detail="–î–∂–µ—Ä–µ–ª–æ –∑ —Ç–∞–∫–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∞–±–æ –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
    finally:
        if conn:
            await conn.close()

@app.get("/sources")
async def list_sources():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –Ω–æ–≤–∏–Ω.
    """
    conn = await get_db_connection()
    try:
        sources = await conn.fetch("SELECT id, name, link, type, verified, reliability_score, status FROM sources")
        return [dict(s) for s in sources]
    finally:
        if conn:
            await conn.close()

@app.post("/news/add")
async def add_news_manual(req: NewsRequest, background_tasks: BackgroundTasks):
    """
    –î–æ–¥–∞—î –Ω–æ–≤—É –Ω–æ–≤–∏–Ω—É –≤—Ä—É—á–Ω—É (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤/–∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—ñ–≤).
    –ù–æ–≤–∏–Ω–∞ –¥–æ–¥–∞—î—Ç—å—Å—è –≤ —á–µ—Ä–≥—É –¥–ª—è AI-–æ–±—Ä–æ–±–∫–∏.
    """
    conn = await get_db_connection()
    try:
        news_id = await conn.fetchval(
            """
            INSERT INTO news (title, content, lang, country, tags, source, link, published_at, file_id, media_type, source_type, expires_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
            RETURNING id
            """,
            req.title, req.content, req.lang, req.country, req.tags, req.source, req.link,
            req.published_at if req.published_at else datetime.utcnow(), req.file_id, req.media_type, req.source_type,
            datetime.utcnow() + timedelta(hours=5)
        )
        background_tasks.add_task(processing_queue.put, news_id)
        return {"status": "success", "message": "–ù–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–æ–±–∫—É", "news_id": news_id}
    finally:
        if conn:
            await conn.close()

@app.get("/news/{user_id}")
async def get_filtered_news(user_id: int, limit: int = 5, offset: int = 0):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        user_settings = await conn.fetchrow(
            "SELECT safe_mode, current_feed_id FROM users WHERE telegram_id = $1", user_id
        )
        safe_mode = user_settings['safe_mode'] if user_settings else False
        current_feed_id = user_settings['current_feed_id'] if user_settings else None

        query = """
            SELECT n.id, n.title, n.content, n.lang, n.country, n.tags, n.ai_classified_topics,
                   n.source, n.link, n.published_at, n.file_id, n.media_type, n.tone, n.sentiment_score, n.is_fake
            FROM news n
            WHERE n.expires_at > NOW() AND n.is_duplicate = FALSE AND n.moderation_status = 'approved'
        """
        params = []
        param_idx = 1

        if current_feed_id:
            feed_filters_data = await conn.fetchrow("SELECT filters FROM custom_feeds WHERE id = $1", current_feed_id)
            if feed_filters_data and feed_filters_data['filters']:
                feed_filters = feed_filters_data['filters']
                if 'tags' in feed_filters and feed_filters['tags']:
                    query += f" AND (n.tags && ${param_idx}::TEXT[] OR n.ai_classified_topics && ${param_idx}::TEXT[])"
                    params.append(feed_filters['tags'])
                    param_idx += 1
                if 'sources' in feed_filters and feed_filters['sources']:
                    query += f" AND n.source IN (SELECT unnest(${param_idx}::TEXT[]))"
                    params.append(feed_filters['sources'])
                    param_idx += 1
                if 'languages' in feed_filters and feed_filters['languages']:
                    query += f" AND n.lang IN (SELECT unnest(${param_idx}::TEXT[]))"
                    params.append(feed_filters['languages'])
                    param_idx += 1
        else:
            filters = await conn.fetchrow(
                "SELECT tag, category, source, language, country, content_type FROM filters WHERE user_id = $1", user_internal_id
            )
            if filters:
                if filters['tag']:
                    query += f" AND (n.tags && ARRAY[$ {param_idx}]::TEXT[] OR n.ai_classified_topics && ARRAY[$ {param_idx}]::TEXT[])"
                    params.append(filters['tag'])
                    param_idx += 1
                if filters['category']:
                    query += f" AND (n.tags && ARRAY[$ {param_idx}]::TEXT[] OR n.ai_classified_topics && ARRAY[$ {param_idx}]::TEXT[])"
                    params.append(filters['category'])
                    param_idx += 1
                if filters['source']:
                    query += f" AND n.source = ${param_idx}"
                    params.append(filters['source'])
                    param_idx += 1
                if filters['language']:
                    query += f" AND n.lang = ${param_idx}"
                    params.append(filters['language'])
                    param_idx += 1
                if filters['country']:
                    query += f" AND n.country = ${param_idx}"
                    params.append(filters['country'])
                    param_idx += 1
                if filters['content_type']:
                    query += f" AND n.media_type = ${param_idx}"
                    params.append(filters['content_type'])
                    param_idx += 1

        blocked_items = await conn.fetch(
            "SELECT block_type, value FROM blocks WHERE user_id = $1", user_internal_id
        )
        for block in blocked_items:
            if block['block_type'] == 'tag':
                query += f" AND NOT (n.tags && ARRAY[$ {param_idx}]::TEXT[] OR n.ai_classified_topics && ARRAY[$ {param_idx}]::TEXT[])"
                params.append(block['value'])
                param_idx += 1
            elif block['block_type'] == 'source':
                query += f" AND n.source != ${param_idx}"
                params.append(block['value'])
                param_idx += 1
            elif block['block_type'] == 'language':
                query += f" AND n.lang != ${param_idx}"
                params.append(block['value'])
                param_idx += 1
            elif block['block_type'] == 'category':
                query += f" AND NOT (n.tags && ARRAY[$ {param_idx}]::TEXT[] OR n.ai_classified_topics && ARRAY[$ {param_idx}]::TEXT[])"
                params.append(block['value'])
                param_idx += 1

        if safe_mode:
            query += " AND (n.tone != '—Ç—Ä–∏–≤–æ–∂–Ω–∞' AND n.tone != '–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π' OR n.tone IS NULL)"
            query += " AND NOT (n.tags && ARRAY['18+', 'NSFW']::TEXT[]) AND NOT (n.ai_classified_topics && ARRAY['18+', 'NSFW']::TEXT[])"

        query += f" AND n.id NOT IN (SELECT news_id FROM user_news_views WHERE user_id = ${param_idx} AND viewed = TRUE)"
        params.append(user_internal_id)
        param_idx += 1

        query += f" ORDER BY n.published_at DESC LIMIT ${param_idx} OFFSET ${param_idx + 1}"
        params.append(limit)
        params.append(offset)

        news_items = await conn.fetch(query, *params)

        return [dict(n) for n in news_items]
    finally:
        if conn:
            await conn.close()

@app.post("/filters/update")
async def update_user_filters(req: FilterUpdateRequest):
    """
    –û–Ω–æ–≤–ª—é—î —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î —ó—Ö, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        existing_filter = await conn.fetchrow("SELECT id FROM filters WHERE user_id = $1", user_internal_id)

        update_parts = []
        params = []
        param_idx = 1
        if req.tag is not None:
            update_parts.append(f"tag = ${param_idx}")
            params.append(req.tag)
            param_idx += 1
        if req.category is not None:
            update_parts.append(f"category = ${param_idx}")
            params.append(req.category)
            param_idx += 1
        if req.source is not None:
            update_parts.append(f"source = ${param_idx}")
            params.append(req.source)
            param_idx += 1
        if req.language is not None:
            update_parts.append(f"language = ${param_idx}")
            params.append(req.language)
            param_idx += 1
        if req.country is not None:
            update_parts.append(f"country = ${param_idx}")
            params.append(req.country)
            param_idx += 1
        if req.content_type is not None:
            update_parts.append(f"content_type = ${param_idx}")
            params.append(req.content_type)
            param_idx += 1

        if existing_filter:
            if update_parts:
                query = f"UPDATE filters SET {', '.join(update_parts)} WHERE user_id = ${param_idx}"
                params.append(user_internal_id)
                await conn.execute(query, *params)
            return {"status": "success", "message": "–§—ñ–ª—å—Ç—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ"}
        else:
            insert_fields = ["user_id"]
            insert_values = ["$1"]
            insert_params = [user_internal_id]
            current_param_idx = 2

            if req.tag is not None:
                insert_fields.append("tag")
                insert_values.append(f"${current_param_idx}")
                insert_params.append(req.tag)
                current_param_idx += 1
            if req.category is not None:
                insert_fields.append("category")
                insert_values.append(f"${current_param_idx}")
                insert_params.append(req.category)
                current_param_idx += 1
            if req.source is not None:
                insert_fields.append("source")
                insert_values.append(f"${current_param_idx}")
                insert_params.append(req.source)
                current_param_idx += 1
            if req.language is not None:
                insert_fields.append("language")
                insert_values.append(f"${current_param_idx}")
                insert_params.append(req.language)
                current_param_idx += 1
            if req.country is not None:
                insert_fields.append("country")
                insert_values.append(f"${current_param_idx}")
                insert_params.append(req.country)
                current_param_idx += 1
            if req.content_type is not None:
                insert_fields.append("content_type")
                insert_values.append(f"${current_param_idx}")
                insert_params.append(req.content_type)
                current_param_idx += 1

            query = f"INSERT INTO filters ({', '.join(insert_fields)}) VALUES ({', '.join(insert_values)})"
            await conn.execute(query, *insert_params)
            return {"status": "success", "message": "–§—ñ–ª—å—Ç—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ"}
    finally:
        if conn:
            await conn.close()

@app.get("/filters/{user_id}")
async def get_user_filters(user_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        filters = await conn.fetchrow(
            "SELECT tag, category, source, language, country, content_type FROM filters WHERE user_id = $1", user_internal_id
        )
        if filters:
            return dict(filters)
        return {}
    finally:
        if conn:
            await conn.close()

@app.delete("/filters/reset/{user_id}")
async def reset_user_filters(user_id: int):
    """
    –í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
        await conn.execute("DELETE FROM filters WHERE user_id = $1", user_internal_id)
        return {"status": "success", "message": "–§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ"}
    finally:
        if conn:
            await conn.close()

@app.get("/digest/{user_id}")
async def get_digest(user_id: int, hours: int = 24):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 'hours' –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        user_settings = await conn.fetchrow("SELECT current_feed_id FROM users WHERE telegram_id = $1", user_id)
        current_feed_id = user_settings['current_feed_id'] if user_settings else None

        query = """
            SELECT id, title, content, lang, country, tags, ai_classified_topics, source, link, published_at, file_id, media_type
            FROM news
            WHERE published_at >= NOW() - INTERVAL '$1 hours' AND is_duplicate = FALSE AND moderation_status = 'approved'
        """
        params = [hours]
        param_idx = 2

        if current_feed_id:
            feed_filters_data = await conn.fetchrow("SELECT filters FROM custom_feeds WHERE id = $1", current_feed_id)
            if feed_filters_data and feed_filters_data['filters']:
                feed_filters = feed_filters_data['filters']
                if 'tags' in feed_filters and feed_filters['tags']:
                    query += f" AND (tags && ${param_idx}::TEXT[] OR ai_classified_topics && ${param_idx}::TEXT[])"
                    params.append(feed_filters['tags'])
                    param_idx += 1
                if 'sources' in feed_filters and feed_filters['sources']:
                    query += f" AND source IN (SELECT unnest(${param_idx}::TEXT[]))"
                    params.append(feed_filters['sources'])
                    param_idx += 1
                if 'languages' in feed_filters and feed_filters['languages']:
                    query += f" AND lang IN (SELECT unnest(${param_idx}::TEXT[]))"
                    params.append(feed_filters['languages'])
                    param_idx += 1
        else:
            filters_data = await conn.fetchrow(
                "SELECT tag, category, source, language, country, content_type FROM filters WHERE user_id = $1", user_internal_id
            )
            if filters_data:
                if filters_data['tag']:
                    query += f" AND (tags && ARRAY[$ {param_idx}]::TEXT[] OR ai_classified_topics && ARRAY[$ {param_idx}]::TEXT[])"
                    params.append(filters_data['tag'])
                    param_idx += 1
                if filters_data['source']:
                    query += f" AND source = ${param_idx}"
                    params.append(filters_data['source'])
                    param_idx += 1
                if filters_data['language']:
                    query += f" AND lang = ${param_idx}"
                    params.append(filters_data['language'])
                    param_idx += 1
                if filters_data['country']:
                    query += f" AND country = ${param_idx}"
                    params.append(filters_data['country'])
                    param_idx += 1
                if filters_data['content_type']:
                    query += f" AND media_type = ${param_idx}"
                    params.append(filters_data['content_type'])
                    param_idx += 1

        news_items = await conn.fetch(query + " ORDER BY published_at DESC", *params)
        return [dict(n) for n in news_items]
    finally:
        if conn:
            await conn.close()

@app.get("/news/search")
async def search_news(query: str, user_id: int, limit: int = 10, offset: int = 0):
    """
    –ó–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω –∑–∞ –∑–∞–ø–∏—Ç–æ–º —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, –≤–º—ñ—Å—Ç—ñ, —Ç–µ–≥–∞—Ö —Ç–∞ AI-–∫–ª–∞—Å–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Ç–µ–º–∞—Ö.
    """
    conn = await get_db_connection()
    try:
        search_pattern = f"%{query.lower()}%"
        news_items = await conn.fetch(
            """
            SELECT id, title, content, lang, country, tags, ai_classified_topics, source, link, published_at, file_id, media_type
            FROM news
            WHERE expires_at > NOW() AND moderation_status = 'approved'
            AND (LOWER(title) LIKE $1 OR LOWER(content) LIKE $1 OR $1 = ANY(tags) OR $1 = ANY(ai_classified_topics))
            ORDER BY published_at DESC
            LIMIT $2 OFFSET $3
            """,
            search_pattern, limit, offset
        )
        return [dict(n) for n in news_items]
    finally:
        if conn:
            await conn.close()

@app.post("/bookmarks/add")
async def add_bookmark(req: BookmarkRequest):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–Ω—É –¥–æ –∑–∞–∫–ª–∞–¥–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO bookmarks (user_id, news_id) VALUES ($1, $2) ON CONFLICT (user_id, news_id) DO NOTHING",
            user_internal_id, req.news_id
        )
        await update_user_stats(conn, user_internal_id, "saved")
        return {"status": "success", "message": "–ù–æ–≤–∏–Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏"}
    finally:
        if conn:
            await conn.close()

@app.get("/bookmarks/{user_id}")
async def get_bookmarks(user_id: int, limit: int = 10, offset: int = 0):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω (–∑–∞–∫–ª–∞–¥–æ–∫) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        saved_news = await conn.fetch(
            """
            SELECT n.id, n.title, n.content, n.lang, n.country, n.tags, n.source, n.link, n.published_at, n.file_id, n.media_type
            FROM news n
            JOIN bookmarks b ON n.id = b.news_id
            WHERE b.user_id = $1
            ORDER BY b.created_at DESC
            LIMIT $2 OFFSET $3
            """,
            user_internal_id, limit, offset
        )
        return [dict(n) for n in saved_news]
    finally:
        if conn:
            await conn.close()

@app.post("/translate")
async def translate_text(req: TranslateRequest):
    """
    –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –Ω–∞–¥–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∫–∞–∑–∞–Ω—É —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à—É–≤–∞–Ω–Ω—è. –ú—ñ—Å—Ü–µ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Gemini API.
    """
    conn = await get_db_connection()
    try:
        cached_translation = await conn.fetchrow(
            "SELECT translated_text FROM translations_cache WHERE original_text = $1 AND original_lang = $2 AND translated_lang = $3",
            req.text, req.source_language if req.source_language else 'auto', req.target_language
        )
        if cached_translation:
            return {"translated_text": cached_translation['translated_text']}

        mock_translated_text = f"[[–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ {req.target_language}]: {req.text} (–º–æ–∫–æ–≤–∞–Ω–æ)]"

        await conn.execute(
            "INSERT INTO translations_cache (original_text, original_lang, translated_text, translated_lang) VALUES ($1, $2, $3, $4)",
            req.text, req.source_language if req.source_language else 'auto', mock_translated_text, req.target_language
        )
        return {"translated_text": mock_translated_text}
    finally:
        if conn:
            await conn.close()

@app.post("/reactions/add")
async def add_reaction(req: ReactionRequest):
    """
    –î–æ–¥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —Ä–µ–∞–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –Ω–æ–≤–∏–Ω—É.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO reactions (user_id, news_id, reaction_type) VALUES ($1, $2, $3) ON CONFLICT (user_id, news_id) DO UPDATE SET reaction_type = $3",
            user_internal_id, req.news_id, req.reaction_type
        )
        if req.reaction_type == '‚ù§Ô∏è':
            await update_user_stats(conn, user_internal_id, "liked_count")
        return {"status": "success", "message": f"–†–µ–∞–∫—Ü—ñ—è '{req.reaction_type}' –¥–æ–¥–∞–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–∞"}
    finally:
        if conn:
            await conn.close()

@app.post("/polls/submit")
async def submit_poll_result(req: PollResultRequest):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è/–≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO poll_results (user_id, news_id, question, answer) VALUES ($1, $2, $3, $4)",
            user_internal_id, req.news_id, req.question, req.answer
        )
        return {"status": "success", "message": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ"}
    finally:
        if conn:
            await conn.close()

@app.get("/trending")
async def get_trending_news(limit: int = 5):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω, “ë—Ä—É–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ö —Ç–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
    –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥.
    """
    conn = await get_db_connection()
    try:
        trending_news = await conn.fetch(
            """
            SELECT n.id, n.title, n.content, n.lang, n.country, n.tags, n.ai_classified_topics,
                   n.source, n.link, n.published_at, n.file_id, n.media_type,
                   (COALESCE(unv.view_count, 0) + COALESCE(r.avg_rating, 0) * 10) AS trend_score
            FROM news n
            LEFT JOIN (SELECT news_id, COUNT(*) as view_count FROM user_news_views WHERE last_viewed_at >= NOW() - INTERVAL '24 hours' GROUP BY news_id) unv ON n.id = unv.news_id
            LEFT JOIN (SELECT news_id, AVG(value) as avg_rating FROM ratings WHERE created_at >= NOW() - INTERVAL '24 hours' GROUP BY news_id) r ON n.id = r.news_id
            WHERE n.expires_at > NOW() AND n.published_at >= NOW() - INTERVAL '48 hours' AND n.moderation_status = 'approved' AND n.is_duplicate = FALSE
            ORDER BY trend_score DESC, n.published_at DESC
            LIMIT $1
            """,
            limit
        )
        return [dict(n) for n in trending_news]
    finally:
        if conn:
            await conn.close()

@app.post("/custom_feeds/create")
async def create_custom_feed(req: CustomFeedRequest):
    """
    –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –¥–æ–±—ñ—Ä–∫—É –Ω–æ–≤–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        result = await conn.fetchrow(
            "INSERT INTO custom_feeds (user_id, feed_name, filters) VALUES ($1, $2, $3::jsonb) RETURNING id",
            user_internal_id, req.feed_name, json.dumps(req.filters)
        )
        return {"status": "success", "message": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –¥–æ–±—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞", "feed_id": result['id']}
    except asyncpg.exceptions.UniqueViolationError:
        raise HTTPException(status_code=400, detail="–î–æ–±—ñ—Ä–∫–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    finally:
        if conn:
            await conn.close()

@app.get("/custom_feeds/{user_id}")
async def get_custom_feeds(user_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–æ–±—ñ—Ä–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        feeds = await conn.fetch(
            "SELECT id, feed_name, filters FROM custom_feeds WHERE user_id = $1", user_internal_id
        )
        return [{"id": f['id'], "feed_name": f['feed_name'], "filters": f['filters']} for f in feeds]
    finally:
        if conn:
            await conn.close()

@app.post("/custom_feeds/switch")
async def switch_custom_feed(req: SwitchFeedRequest):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞—î –∞–∫—Ç–∏–≤–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –¥–æ–±—ñ—Ä–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        feed_exists = await conn.fetchval(
            "SELECT id FROM custom_feeds WHERE id = $1 AND user_id = $2", req.feed_id, user_internal_id
        )
        if not feed_exists:
            raise HTTPException(status_code=404, detail="–î–æ–±—ñ—Ä–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–æ–Ω–∞ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.")

        await conn.execute(
            "UPDATE users SET current_feed_id = $1 WHERE id = $2",
            req.feed_id, user_internal_id
        )
        return {"status": "success", "message": f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –¥–æ–±—ñ—Ä–∫—É ID: {req.feed_id}"}
    finally:
        if conn:
            await conn.close()

@app.post("/ai/classify_news")
async def classify_news(news_id: int, text: str):
    """
    –ú–æ–∫–æ–≤–∞–Ω–∏–π AI-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω.
    """
    topics = random.sample(["–ü–æ–ª—ñ—Ç–∏–∫–∞", "–ï–∫–æ–Ω–æ–º—ñ–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–°–ø–æ—Ä—Ç", "–ö—É–ª—å—Ç—É—Ä–∞", "–ù–∞—É–∫–∞", "–ó–¥–æ—Ä–æ–≤'—è"], k=random.randint(1,3))
    return {
        "news_id": news_id,
        "topics": topics,
        "message": "AI –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ (–º–æ–∫–æ–≤–∞–Ω–æ)"
    }

@app.post("/ai/analyze_sentiment")
async def analyze_sentiment(news_id: int, text: str):
    """
    –ú–æ–∫–æ–≤–∞–Ω–∏–π AI-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É.
    """
    sentiment_map = {
        "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π": "–æ–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–∞",
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π": "—Ç—Ä–∏–≤–æ–∂–Ω–∞",
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞"
    }
    sentiment_label = random.choice(list(sentiment_map.keys()))
    return {
        "news_id": news_id,
        "tone": sentiment_map[sentiment_label],
        "sentiment_score": random.uniform(-1.0, 1.0),
        "message": "AI –∞–Ω–∞–ª—ñ–∑ —Ç–æ–Ω—É –≤–∏–∫–æ–Ω–∞–Ω–∏–π (–º–æ–∫–æ–≤–∞–Ω–æ)"
    }

@app.post("/ai/rewrite_headline")
async def rewrite_headline(text: str):
    """
    –ú–æ–∫–æ–≤–∞–Ω–∏–π AI-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤.
    """
    return {
        "original_text": text,
        "rewritten_headline": f"AI-–∑–∞–≥–æ–ª–æ–≤–æ–∫: {text[:random.randint(15, 30)]}... (–º–æ–∫–æ–≤–∞–Ω–æ)",
        "message": "AI –ø–µ—Ä–µ–ø–∏—Å–∞–≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–æ–∫–æ–≤–∞–Ω–æ)"
    }

@app.post("/ai/deduplicate")
async def deduplicate_news_api(news_id: int, content: str):
    """
    –ú–æ–∫–æ–≤–∞–Ω–∏–π AI-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω.
    """
    is_duplicate = random.random() < 0.1
    potential_duplicates = []
    if is_duplicate:
        potential_duplicates = [{"id": 999, "title": "–ú–æ–∫–æ–≤–∞–Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç –Ω–æ–≤–∏–Ω–∏"}]
    return {
        "news_id": news_id,
        "is_duplicate": is_duplicate,
        "potential_duplicates": potential_duplicates,
        "message": "AI –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ (–º–æ–∫–æ–≤–∞–Ω–æ)"
    }

@app.get("/users/{user_id}/gamification_stats")
async def get_user_gamification_stats(user_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        stats = await conn.fetchrow(
            """
            SELECT u.level, u.badges, us.viewed, us.saved, us.liked_count, us.comments_count, us.sources_added_count
            FROM users u
            JOIN user_stats us ON u.id = us.user_id
            WHERE u.id = $1
            """,
            user_internal_id
        )
        if stats:
            return dict(stats)
        raise HTTPException(status_code=404, detail="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    finally:
        if conn:
            await conn.close()

@app.post("/log_user_activity")
async def log_user_activity(req: NewsInteractionRequest):
    """
    –õ–æ–≥—É—î –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –Ω–æ–≤–∏–Ω.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await conn.execute(
            "INSERT INTO interactions (user_id, news_id, action, created_at) VALUES ($1, $2, $3, NOW())",
            user_internal_id, req.news_id, req.action
        )
        if req.action == 'read_full':
            await conn.execute(
                "UPDATE user_news_views SET read_full = TRUE, time_spent_seconds = $3 WHERE user_id = $1 AND news_id = $2",
                user_internal_id, req.news_id, req.time_spent
            )
            await update_user_stats(conn, user_internal_id, "read_full_count")
        elif req.action == 'skip':
             await update_user_stats(conn, user_internal_id, "skipped_count")
        return {"status": "success", "message": "–î—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞"}
    finally:
        if conn:
            await conn.close()

@app.post("/comments/add")
async def add_comment(req: CommentRequest):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –Ω–æ–≤–∏–Ω–∏.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        comment_id = await conn.fetchval(
            "INSERT INTO comments (news_id, user_id, parent_comment_id, content) VALUES ($1, $2, $3, $4) RETURNING id",
            req.news_id, user_internal_id, req.parent_comment_id, req.content
        )
        await update_user_stats(conn, user_internal_id, "comments_count")
        return {"status": "success", "message": "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ", "comment_id": comment_id}
    finally:
        if conn:
            await conn.close()

@app.get("/comments/{news_id}")
async def get_comments(news_id: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏.
    """
    conn = await get_db_connection()
    try:
        comments = await conn.fetch(
            """
            SELECT c.id, c.content, c.created_at, u.telegram_id as user_telegram_id, u.language as user_lang, c.parent_comment_id
            FROM comments c JOIN users u ON c.user_id = u.id
            WHERE c.news_id = $1 AND c.moderation_status = 'approved'
            ORDER BY c.created_at ASC
            """,
            news_id
        )
        return [dict(c) for c in comments]
    finally:
        if conn:
            await conn.close()

@app.post("/admin/moderate")
async def moderate_content(req: AdminActionRequest):
    """
    –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É (–Ω–æ–≤–∏–Ω–∏, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, –¥–∂–µ—Ä–µ–ª–∞).
    """
    conn = await get_db_connection()
    try:
        message = ""
        if req.action_type == "approve_news":
            await conn.execute("UPDATE news SET moderation_status = 'approved' WHERE id = $1", req.target_id)
            message = f"–ù–æ–≤–∏–Ω—É ID {req.target_id} —Å—Ö–≤–∞–ª–µ–Ω–æ."
        elif req.action_type == "reject_news":
            await conn.execute("UPDATE news SET moderation_status = 'rejected' WHERE id = $1", req.target_id)
            message = f"–ù–æ–≤–∏–Ω—É ID {req.target_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
        elif req.action_type == "approve_comment":
            await conn.execute("UPDATE comments SET moderation_status = 'approved' WHERE id = $1", req.target_id)
            message = f"–ö–æ–º–µ–Ω—Ç–∞—Ä ID {req.target_id} —Å—Ö–≤–∞–ª–µ–Ω–æ."
        elif req.action_type == "block_source":
            await conn.execute("UPDATE sources SET status = 'blocked' WHERE id = $1", req.target_id)
            await conn.execute("INSERT INTO blocked_sources (source_id, reason) VALUES ($1, $2) ON CONFLICT (source_id) DO UPDATE SET reason = $2", req.target_id, req.details.get("reason", "N/A") if req.details else "N/A")
            message = f"–î–∂–µ—Ä–µ–ª–æ ID {req.target_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ."
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")

        await conn.execute(
            "INSERT INTO admin_actions (admin_user_id, action_type, target_id, details) VALUES ($1, $2, $3, $4::jsonb)",
            req.admin_user_id, req.action_type, req.target_id, json.dumps(req.details) if req.details else {}
        )
        return {"status": "success", "message": message}
    finally:
        if conn:
            await conn.close()

@app.post("/invite/generate")
async def generate_invite_code(req: InviteRequest):
    """
    –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    """
    conn = await get_db_connection()
    try:
        user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", req.inviter_user_id)
        if not user_internal_id:
            raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞-–∑–∞–ø—Ä–æ—à—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        invite_code = f"INV{user_internal_id}-{datetime.utcnow().timestamp():.0f}{random.randint(1000, 9999)}"
        await conn.execute(
            "INSERT INTO invites (inviter_user_id, invite_code) VALUES ($1, $2)",
            user_internal_id, invite_code
        )
        return {"status": "success", "invite_code": invite_code}
    except asyncpg.exceptions.UniqueViolationError:
        raise HTTPException(status_code=400, detail="–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        if conn:
            await conn.close()

@app.post("/invite/accept")
async def accept_invite(invite_code: str, invited_user_id: int):
    """
    –ü—Ä–∏–π–º–∞—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è. –Ø–∫—â–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥—ñ–π—Å–Ω–µ, –ø–æ–≤'—è–∑—É—î –∑–∞–ø—Ä–æ—à–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    —ñ –Ω–∞–¥–∞—î –±–æ–Ω—É—Å–∏ (–º–æ–∫–æ–≤–∞–Ω–æ).
    """
    conn = await get_db_connection()
    try:
        invite_record = await conn.fetchrow(
            "SELECT inviter_user_id FROM invites WHERE invite_code = $1 AND invited_user_id IS NULL AND accepted_at IS NULL", invite_code
        )
        if invite_record:
            inviter_user_internal_id = invite_record['inviter_user_id']
            
            invited_user_internal_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", invited_user_id)
            if not invited_user_internal_id:
                invited_user_internal_id = await conn.fetchval(
                    "INSERT INTO users (telegram_id, created_at, inviter_id) VALUES ($1, NOW(), $2) RETURNING id",
                    invited_user_id, inviter_user_internal_id
                )
                await update_user_stats(conn, invited_user_internal_id, "viewed", 0)
            else:
                await conn.execute(
                    "UPDATE users SET inviter_id = $1 WHERE id = $2 AND inviter_id IS NULL",
                    inviter_user_internal_id, invited_user_internal_id
                )

            await conn.execute(
                "UPDATE invites SET invited_user_id = $1, accepted_at = NOW() WHERE invite_code = $2",
                invited_user_internal_id, invite_code
            )
            
            await conn.execute("UPDATE users SET level = level + 1 WHERE id = $1", inviter_user_internal_id)
            await conn.execute("UPDATE users SET is_premium = TRUE, premium_expires_at = NOW() + INTERVAL '7 days' WHERE id = $1", invited_user_internal_id)
            
            return {"status": "success", "message": "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å."}
        raise HTTPException(status_code=400, detail="–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è.")
    finally:
        if conn:
            await conn.close()

@app.get("/api/news")
async def get_public_news_api(
    topic: Optional[str] = None,
    lang: Optional[str] = None,
    sentiment: Optional[str] = None,
    limit: int = 10,
    offset: int = 0
):
    """
    –ü—É–±–ª—ñ—á–Ω–∏–π API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
    """
    conn = await get_db_connection()
    try:
        query = "SELECT id, title, content, lang, country, tags, ai_classified_topics, source, link, published_at, tone, sentiment_score FROM news WHERE moderation_status = 'approved' AND expires_at > NOW() AND is_duplicate = FALSE"
        params = []
        param_idx = 1

        if topic:
            query += f" AND (ARRAY[${param_idx}] && tags OR ARRAY[${param_idx}] && ai_classified_topics)"
            params.append([topic])
            param_idx += 1
        if lang:
            query += f" AND lang = ${param_idx}"
            params.append(lang)
            param_idx += 1
        if sentiment:
            query += f" AND tone = ${param_idx}"
            params.append(sentiment)
            param_idx += 1

        query += f" ORDER BY published_at DESC LIMIT ${param_idx} OFFSET ${param_idx + 1}"
        params.append(limit)
        params.append(offset)

        news_items = await conn.fetch(query, *params)
        return [dict(n) for n in news_items]
    finally:
        if conn:
            await conn.close()

# ==== Telegram Webhook Endpoint ====
@app.post("/webhook")
async def telegram_webhook(request: Request):
    """
    –ü—Ä–∏–π–º–∞—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —ñ –ø–µ—Ä–µ–¥–∞—î —ó—Ö Aiogram –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.
    """
    update_data = await request.json()
    telegram_update = types.Update(**update_data)
    await dp.feed_update(bot, telegram_update)
    return {"status": "ok"}


# Placeholder for cron jobs/background tasks for auto-cleanup and auto-notifications
@app.on_event("startup")
async def startup_event():
    """
    –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É FastAPI –¥–æ–¥–∞—Ç–∫–∞.
    –†–µ—î—Å—Ç—Ä—É—î Aiogram —Ö–µ–Ω–¥–ª–µ—Ä–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î, –∑–∞–ø—É—Å–∫–∞—î —Ñ–æ–Ω–æ–≤—ñ –≤–æ—Ä–∫–µ—Ä–∏
    —Ç–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ. –¢–∞–∫–æ–∂ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î Webhook –¥–ª—è Telegram –±–æ—Ç–∞.
    """
    print("FastAPI –¥–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        conn = await get_db_connection()
        await conn.close()
        print("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–µ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ: {e}")

    # ==== –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Aiogram —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ====
    register_handlers(dp)
    print("Aiogram —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è AI-–æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω
    asyncio.create_task(news_processing_worker())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –Ω–æ–≤–∏–Ω (–∫–æ–∂–Ω—ñ 4 –≥–æ–¥–∏–Ω–∏)
    async def schedule_cleanup():
        while True:
            await cleanup_old_news_task()
            await asyncio.sleep(4 * 3600)

    asyncio.create_task(schedule_cleanup())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω)
    async def schedule_auto_notifications():
        while True:
            conn = await get_db_connection()
            try:
                users_to_notify = await conn.fetch("SELECT telegram_id, id AS user_internal_id FROM users WHERE auto_notifications = TRUE AND view_mode = 'auto'")
                for user in users_to_notify:
                    news_to_send = await conn.fetch(
                        """
                        SELECT n.id, n.title, n.content, n.lang, n.country, n.tags, n.source, n.link, n.published_at
                        FROM news n
                        WHERE n.expires_at > NOW()
                        AND n.id NOT IN (SELECT news_id FROM user_news_views WHERE user_id = $1 AND viewed = TRUE)
                        AND n.moderation_status = 'approved'
                        ORDER BY n.published_at DESC
                        LIMIT 1
                        """,
                        user['user_internal_id']
                    )
                    if news_to_send:
                        news_item = news_to_send[0]
                        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ aiogram bot
                        try:
                            # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è MarkdownV2 –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                            title_escaped = escape_markdown_v2(news_item['title'])
                            content_escaped = escape_markdown_v2(news_item['content'])
                            link_escaped = escape_markdown_v2(news_item['link']) if news_item.get('link') else None

                            message_text = f"üîî –ù–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞: *{title_escaped}*\n\n{content_escaped}\n\n"
                            if link_escaped:
                                message_text += f"[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({link_escaped})"

                            await bot.send_message(
                                chat_id=user['telegram_id'],
                                text=message_text,
                                parse_mode=ParseMode.MARKDOWN_V2
                            )
                            print(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['telegram_id']} –ø—Ä–æ –Ω–æ–≤–∏–Ω—É: {news_item['title']}")
                            await conn.execute(
                                "INSERT INTO user_news_views (user_id, news_id, viewed, first_viewed_at) VALUES ($1, $2, TRUE, NOW()) ON CONFLICT (user_id, news_id) DO UPDATE SET viewed = TRUE, last_viewed_at = NOW()",
                                user['user_internal_id'], news_item['id']
                            )
                            await update_user_stats(conn, user['user_internal_id'], "viewed")
                        except Exception as send_e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['telegram_id']}: {send_e}")

            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–¥–∞—á—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")
            finally:
                if conn:
                    await conn.close()
            await asyncio.sleep(15 * 60)

    asyncio.create_task(schedule_auto_notifications())

    # ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram Webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫–∞ ====
    webhook_url = os.getenv("WEBAPP_URL") + "/webhook"
    
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(webhook_url)
        print(f"Telegram Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {webhook_url}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ Telegram Webhook: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """
    –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ FastAPI –¥–æ–¥–∞—Ç–∫–∞.
    –í–∏–¥–∞–ª—è—î Telegram Webhook.
    """
    print("FastAPI –¥–æ–¥–∞—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
    try:
        await bot.delete_webhook()
        print("Telegram Webhook –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ Telegram Webhook: {e}")